
=head1 NAME

Venus - Standard Library

=cut

=head1 ABSTRACT

Standard Library for Perl 5

=cut

=head1 VERSION

5.00

=cut

=head1 SYNOPSIS

  package main;

  use Venus 'catch', 'error', 'raise';

  # error handling
  my ($error, $result) = catch {
    error;
  };

  # boolean keywords
  if ($result) {
    error;
  }

  # raise exceptions
  if ($result) {
    raise 'MyApp::Error';
  }

  # boolean keywords, and more!
  my $bool = true ne false;

=cut

=head1 DESCRIPTION

This library provides an object-orientation framework and extendible standard
library for Perl 5 with classes which wrap most native Perl data types. Venus
has a simple modular architecture, robust library of classes, methods, and
roles, supports pure-Perl autoboxing, advanced exception handling, "true" and
"false" functions, package introspection, command-line options parsing, and
more. This package will always automatically exports C<true> and C<false>
keyword functions (unless existing routines of the same name already exist in
the calling package or its parents), otherwise exports keyword functions as
requested at import. This library requires Perl C<5.18+>.

=head1 CAPABILITIES

The following is a short list of capabilities:

=over 4

=item *

Perl 5.18.0+

=item *

Zero Dependencies

=item *

Fast Object-Orientation

=item *

Robust Standard Library

=item *

Intuitive Value Classes

=item *

Pure Perl Autoboxing

=item *

Convenient Utility Classes

=item *

Simple Package Reflection

=item *

Flexible Exception Handling

=item *

Composable Standards

=item *

Pluggable (no monkeypatching)

=item *

Proxyable Methods

=item *

Type Assertions

=item *

Type Coercions

=item *

Value Casting

=item *

Boolean Values

=item *

Complete Documentation

=item *

Complete Test Coverage

=back

=cut

=head1 FUNCTIONS

This package provides the following functions:

=cut

=head2 all

  all(arrayref | hashref | consumes[Venus::Role::Mappable] $lvalue, any $rvalue) (boolean)

The all function accepts an arrayref, hashref, or
L<"mappable"|Venus::Role::Mappable> and returns true if the rvalue is a
callback and returns true for all items in the collection. If the rvalue
provided is not a coderef that value's type and value will be used as the
criteria.

I<Since C<4.15>>

=over 4

=item all example 1

  # given: synopsis

  package main;

  use Venus 'all';

  my $all = all [1, '1'], 1;

  # false

=back

=over 4

=item all example 2

  # given: synopsis

  package main;

  use Venus 'all';

  my $all = all [1, 1], 1;

  # true

=back

=over 4

=item all example 3

  # given: synopsis

  package main;

  use Venus 'all';

  my $all = all {1, 2}, 1;

  # false

=back

=over 4

=item all example 4

  # given: synopsis

  package main;

  use Venus 'all';

  my $all = all {1, 1}, 1;

  # true

=back

=over 4

=item all example 5

  # given: synopsis

  package main;

  use Venus 'all';

  my $all = all [[1], [1]], [1];

  # true

=back

=over 4

=item all example 6

  # given: synopsis

  package main;

  use Venus 'all';

  my $all = all [1, '1', 2..4], sub{$_ > 0};

  # true

=back

=over 4

=item all example 7

  # given: synopsis

  package main;

  use Venus 'all';

  my $all = all [1, '1', 2..4], sub{$_ > 1};

  # false

=back

=cut

=head2 any

  any(arrayref | hashref | consumes[Venus::Role::Mappable] $lvalue, any $rvalue) (boolean)

The any function accepts an arrayref, hashref, or
L<"mappable"|Venus::Role::Mappable> and returns true if the rvalue is a
callback and returns true for any items in the collection. If the rvalue
provided is not a coderef that value's type and value will be used as the
criteria.

I<Since C<4.15>>

=over 4

=item any example 1

  # given: synopsis

  package main;

  use Venus 'any';

  my $any = any [1, '1'], 1;

  # true

=back

=over 4

=item any example 2

  # given: synopsis

  package main;

  use Venus 'any';

  my $any = any [1, 1], 0;

  # false

=back

=over 4

=item any example 3

  # given: synopsis

  package main;

  use Venus 'any';

  my $any = any {1, 2}, 1;

  # false

=back

=over 4

=item any example 4

  # given: synopsis

  package main;

  use Venus 'any';

  my $any = any {1, 1}, 1;

  # true

=back

=over 4

=item any example 5

  # given: synopsis

  package main;

  use Venus 'any';

  my $any = any [[0], [1]], [1];

  # true

=back

=over 4

=item any example 6

  # given: synopsis

  package main;

  use Venus 'any';

  my $any = any [1, '1', 2..4], sub{!defined};

  # false

=back

=over 4

=item any example 7

  # given: synopsis

  package main;

  use Venus 'any';

  my $any = any [1, '1', 2..4, undef], sub{!defined};

  # true

=back

=cut

=head2 args

  args(arrayref $value, string | coderef $code, any @args) (any)

The args function builds and returns a L<Venus::Args> object, or dispatches to
the coderef or method provided.

I<Since C<3.10>>

=over 4

=item args example 1

  package main;

  use Venus 'args';

  my $args = args ['--resource', 'users'];

  # bless({...}, 'Venus::Args')

=back

=over 4

=item args example 2

  package main;

  use Venus 'args';

  my $args = args ['--resource', 'users'], 'indexed';

  # {0 => '--resource', 1 => 'users'}

=back

=cut

=head2 array

  array(arrayref | hashref $value, string | coderef $code, any @args) (any)

The array function builds and returns a L<Venus::Array> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item array example 1

  package main;

  use Venus 'array';

  my $array = array [];

  # bless({...}, 'Venus::Array')

=back

=over 4

=item array example 2

  package main;

  use Venus 'array';

  my $array = array [1..4], 'push', 5..9;

  # [1..9]

=back

=cut

=head2 arrayref

  arrayref(any @args) (arrayref)

The arrayref function takes a list of arguments and returns a arrayref.

I<Since C<3.10>>

=over 4

=item arrayref example 1

  package main;

  use Venus 'arrayref';

  my $arrayref = arrayref(content => 'example');

  # [content => "example"]

=back

=over 4

=item arrayref example 2

  package main;

  use Venus 'arrayref';

  my $arrayref = arrayref([content => 'example']);

  # [content => "example"]

=back

=over 4

=item arrayref example 3

  package main;

  use Venus 'arrayref';

  my $arrayref = arrayref('content');

  # ['content']

=back

=cut

=head2 assert

  assert(any $data, string $expr) (any)

The assert function builds a L<Venus::Assert> object and returns the result of
a L<Venus::Assert/validate> operation.

I<Since C<2.40>>

=over 4

=item assert example 1

  package main;

  use Venus 'assert';

  my $assert = assert(1234567890, 'number');

  # 1234567890

=back

=over 4

=item assert example 2

  package main;

  use Venus 'assert';

  my $assert = assert(1234567890, 'float');

  # Exception! (isa Venus::Check::Error)

=back

=over 4

=item assert example 3

  package main;

  use Venus 'assert';

  my $assert = assert(1234567890, 'number | float');

  # 1234567890

=back

=cut

=head2 async

  async(coderef $code, any @args) (Venus::Future)

The async function accepts a callback and executes it asynchronously via
L<Venus::Process/future>. This function returns a L<Venus::Future> object which
can be fulfilled via L<Venus::Future/wait>.

I<Since C<3.40>>

=over 4

=item async example 1

  package main;

  use Venus 'async';

  my $async = async sub{
    'done'
  };

  # bless({...}, 'Venus::Future')

=back

=cut

=head2 atom

  atom(any $value) (Venus::Atom)

The atom function builds and returns a L<Venus::Atom> object.

I<Since C<3.55>>

=over 4

=item atom example 1

  package main;

  use Venus 'atom';

  my $atom = atom 'super-admin';

  # bless({scope => sub{...}}, "Venus::Atom")

  # "$atom"

  # "super-admin"

=back

=cut

=head2 await

  await(Venus::Future $future, number $timeout) (any)

The await function accepts a L<Venus::Future> object and eventually returns a
value (or values) for it. The value(s) returned are the return values or
emissions from the asychronous callback executed with L</async> which produced
the process object.

I<Since C<3.40>>

=over 4

=item await example 1

  package main;

  use Venus 'async', 'await';

  my $process;

  my $async = async sub{
    return 'done';
  };

  my $await = await $async;

  # bless(..., "Venus::Future")

=back

=cut

=head2 bool

  bool(any $value) (Venus::Boolean)

The bool function builds and returns a L<Venus::Boolean> object.

I<Since C<2.55>>

=over 4

=item bool example 1

  package main;

  use Venus 'bool';

  my $bool = bool;

  # bless({value => 0}, 'Venus::Boolean')

=back

=over 4

=item bool example 2

  package main;

  use Venus 'bool';

  my $bool = bool 1_000;

  # bless({value => 1}, 'Venus::Boolean')

=back

=cut

=head2 box

  box(any $data) (Venus::Box)

The box function returns a L<Venus::Box> object for the argument provided.

I<Since C<2.32>>

=over 4

=item box example 1

  package main;

  use Venus 'box';

  my $box = box({});

  # bless({value => bless({value => {}}, 'Venus::Hash')}, 'Venus::Box')

=back

=over 4

=item box example 2

  package main;

  use Venus 'box';

  my $box = box([]);

  # bless({value => bless({value => []}, 'Venus::Array')}, 'Venus::Box')

=back

=cut

=head2 call

  call(string | object | coderef $data, any @args) (any)

The call function dispatches function and method calls to a package and returns
the result.

I<Since C<2.32>>

=over 4

=item call example 1

  package main;

  use Venus 'call';

  require Digest::SHA;

  my $result = call(\'Digest::SHA', 'new');

  # bless(do{\(my $o = '...')}, 'digest::sha')

=back

=over 4

=item call example 2

  package main;

  use Venus 'call';

  require Digest::SHA;

  my $result = call('Digest::SHA', 'sha1_hex');

  # "da39a3ee5e6b4b0d3255bfef95601890afd80709"

=back

=over 4

=item call example 3

  package main;

  use Venus 'call';

  require Venus::Hash;

  my $result = call(sub{'Venus::Hash'->new(@_)}, {1..4});

  # bless({value => {1..4}}, 'Venus::Hash')

=back

=over 4

=item call example 4

  package main;

  use Venus 'call';

  require Venus::Box;

  my $result = call(Venus::Box->new(value => {}), 'merge', {1..4});

  # bless({value => bless({value => {1..4}}, 'Venus::Hash')}, 'Venus::Box')

=back

=cut

=head2 cast

  cast(any $data, string $type) (object)

The cast function returns the argument provided as an object, promoting native
Perl data types to data type objects. The optional second argument can be the
name of the type for the object to cast to explicitly.

I<Since C<1.40>>

=over 4

=item cast example 1

  package main;

  use Venus 'cast';

  my $undef = cast;

  # bless({value => undef}, "Venus::Undef")

=back

=over 4

=item cast example 2

  package main;

  use Venus 'cast';

  my @booleans = map cast, true, false;

  # (bless({value => 1}, "Venus::Boolean"), bless({value => 0}, "Venus::Boolean"))

=back

=over 4

=item cast example 3

  package main;

  use Venus 'cast';

  my $example = cast bless({}, "Example");

  # bless({value => 1}, "Example")

=back

=over 4

=item cast example 4

  package main;

  use Venus 'cast';

  my $float = cast 1.23;

  # bless({value => "1.23"}, "Venus::Float")

=back

=cut

=head2 catch

  catch(coderef $block) (Venus::Error, any)

The catch function executes the code block trapping errors and returning the
caught exception in scalar context, and also returning the result as a second
argument in list context.

I<Since C<0.01>>

=over 4

=item catch example 1

  package main;

  use Venus 'catch';

  my $error = catch {die};

  $error;

  # "Died at ..."

=back

=over 4

=item catch example 2

  package main;

  use Venus 'catch';

  my ($error, $result) = catch {error};

  $error;

  # bless({...}, 'Venus::Error')

=back

=over 4

=item catch example 3

  package main;

  use Venus 'catch';

  my ($error, $result) = catch {true};

  $result;

  # 1

=back

=cut

=head2 caught

  caught(object $error, string | tuple[string, string] $identity, coderef $block) (any)

The caught function evaluates the exception object provided and validates its
identity and name (if provided) then executes the code block provided returning
the result of the callback. If no callback is provided this function returns
the exception object on success and C<undef> on failure.

I<Since C<1.95>>

=over 4

=item caught example 1

  package main;

  use Venus 'catch', 'caught', 'error';

  my $error = catch { error };

  my $result = caught $error, 'Venus::Error';

  # bless(..., 'Venus::Error')

=back

=over 4

=item caught example 2

  package main;

  use Venus 'catch', 'caught', 'raise';

  my $error = catch { raise 'Example::Error' };

  my $result = caught $error, 'Venus::Error';

  # bless(..., 'Venus::Error')

=back

=over 4

=item caught example 3

  package main;

  use Venus 'catch', 'caught', 'raise';

  my $error = catch { raise 'Example::Error' };

  my $result = caught $error, 'Example::Error';

  # bless(..., 'Venus::Error')

=back

=over 4

=item caught example 4

  package main;

  use Venus 'catch', 'caught', 'raise';

  my $error = catch { raise 'Example::Error', { name => 'on.test' } };

  my $result = caught $error, ['Example::Error', 'on.test'];

  # bless(..., 'Venus::Error')

=back

=over 4

=item caught example 5

  package main;

  use Venus 'catch', 'caught', 'raise';

  my $error = catch { raise 'Example::Error', { name => 'on.recv' } };

  my $result = caught $error, ['Example::Error', 'on.send'];

  # undef

=back

=over 4

=item caught example 6

  package main;

  use Venus 'catch', 'caught', 'error';

  my $error = catch { error };

  my $result = caught $error, ['Example::Error', 'on.send'];

  # undef

=back

=over 4

=item caught example 7

  package main;

  use Venus 'catch', 'caught', 'error';

  my $error = catch { error };

  my $result = caught $error, ['Example::Error'];

  # undef

=back

=over 4

=item caught example 8

  package main;

  use Venus 'catch', 'caught', 'error';

  my $error = catch { error };

  my $result = caught $error, 'Example::Error';

  # undef

=back

=over 4

=item caught example 9

  package main;

  use Venus 'catch', 'caught', 'error';

  my $error = catch { error { name => 'on.send' } };

  my $result = caught $error, ['Venus::Error', 'on.send'];

  # bless(..., 'Venus::Error')

=back

=over 4

=item caught example 10

  package main;

  use Venus 'catch', 'caught', 'error';

  my $error = catch { error { name => 'on.send.open' } };

  my $result = caught $error, ['Venus::Error', 'on.send'], sub {
    $error->stash('caught', true) if $error->is('on.send.open');
    return $error;
  };

  # bless(..., 'Venus::Error')

=back

=cut

=head2 chain

  chain(string | object | coderef $self, string | within[arrayref, string] @args) (any)

The chain function chains function and method calls to a package (and return
values) and returns the result.

I<Since C<2.32>>

=over 4

=item chain example 1

  package main;

  use Venus 'chain';

  my $result = chain('Venus::Path', ['new', 't'], 'exists');

  # 1

=back

=over 4

=item chain example 2

  package main;

  use Venus 'chain';

  my $result = chain('Venus::Path', ['new', 't'], ['test', 'd']);

  # 1

=back

=cut

=head2 check

  check(any $data, string $expr) (boolean)

The check function builds a L<Venus::Assert> object and returns the result of
a L<Venus::Assert/check> operation.

I<Since C<2.40>>

=over 4

=item check example 1

  package main;

  use Venus 'check';

  my $check = check(rand, 'float');

  # true

=back

=over 4

=item check example 2

  package main;

  use Venus 'check';

  my $check = check(rand, 'string');

  # false

=back

=cut

=head2 clargs

  clargs(arrayref $args, arrayref $spec) (Venus::Args, Venus::Opts, Venus::Vars)

The clargs function accepts a single arrayref of L<Getopt::Long> specs, or an
arrayref of arguments followed by an arrayref of L<Getopt::Long> specs, and
returns a three element list of L<Venus::Args>, L<Venus::Opts>, and
L<Venus::Vars> objects. If only a single arrayref is provided, the arguments
will be taken from C<@ARGV>. If this function is called in scalar context only
the L<Venus::Opts> object will be returned.

I<Since C<3.10>>

=over 4

=item clargs example 1

  package main;

  use Venus 'clargs';

  my ($args, $opts, $vars) = clargs;

  # (
  #   bless(..., 'Venus::Args'),
  #   bless(..., 'Venus::Opts'),
  #   bless(..., 'Venus::Vars')
  # )

=back

=over 4

=item clargs example 2

  package main;

  use Venus 'clargs';

  my ($args, $opts, $vars) = clargs ['resource|r=s', 'help|h'];

  # (
  #   bless(..., 'Venus::Args'),
  #   bless(..., 'Venus::Opts'),
  #   bless(..., 'Venus::Vars')
  # )

=back

=over 4

=item clargs example 3

  package main;

  use Venus 'clargs';

  my ($args, $opts, $vars) = clargs ['--resource', 'help'],
    ['resource|r=s', 'help|h'];

  # (
  #   bless(..., 'Venus::Args'),
  #   bless(..., 'Venus::Opts'),
  #   bless(..., 'Venus::Vars')
  # )

=back

=over 4

=item clargs example 4

  package main;

  use Venus 'clargs';

  my ($args, $opts, $vars) = clargs ['--help', 'how-to'],
    ['resource|r=s', 'help|h'];

  # (
  #   bless(..., 'Venus::Args'),
  #   bless(..., 'Venus::Opts'),
  #   bless(..., 'Venus::Vars')
  # )

=back

=over 4

=item clargs example 5

  package main;

  use Venus 'clargs';

  my $opts = clargs ['--help', 'how-to'], ['resource|r=s', 'help|h'];

  # bless(..., 'Venus::Opts'),

=back

=cut

=head2 cli

  cli(arrayref $args) (Venus::Cli)

The cli function builds and returns a L<Venus::Cli> object.

I<Since C<2.55>>

=over 4

=item cli example 1

  package main;

  use Venus 'cli';

  my $cli = cli;

  # bless({...}, 'Venus::Cli')

=back

=over 4

=item cli example 2

  package main;

  use Venus 'cli';

  my $cli = cli 'mycli';

  # bless({...}, 'Venus::Cli')

  # $cli->boolean('option', 'help');

  # $cli->parse('--help');

  # $cli->option_value('help');

  # 1

=back

=cut

=head2 clone

  clone(ref $value) (ref)

The clone function uses L<Storable/dclone> to perform a deep clone of the
reference provided and returns a copy.

I<Since C<3.55>>

=over 4

=item clone example 1

  package main;

  use Venus 'clone';

  my $orig = {1..4};

  my $clone = clone $orig;

  $orig->{3} = 5;

  my $result = $clone;

  # {1..4}

=back

=over 4

=item clone example 2

  package main;

  use Venus 'clone';

  my $orig = {1,2,3,{1..4}};

  my $clone = clone $orig;

  $orig->{3}->{3} = 5;

  my $result = $clone;

  # {1,2,3,{1..4}}

=back

=cut

=head2 code

  code(coderef $value, string | coderef $code, any @args) (any)

The code function builds and returns a L<Venus::Code> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item code example 1

  package main;

  use Venus 'code';

  my $code = code sub {};

  # bless({...}, 'Venus::Code')

=back

=over 4

=item code example 2

  package main;

  use Venus 'code';

  my $code = code sub {[1, @_]}, 'curry', 2,3,4;

  # sub {...}

=back

=cut

=head2 concat

  concat(any @args) (string)

The concat function stringifies and L<"joins"|perlfunc/join> multiple values delimited
by a single space and returns the resulting string.

I<Since C<4.15>>

=over 4

=item concat example 1

  # given: synopsis

  package main;

  use Venus 'concat';

  my $concat = concat;

  # ""

=back

=over 4

=item concat example 2

  # given: synopsis

  package main;

  use Venus 'concat';

  my $concat = concat 'hello';

  # "hello"

=back

=over 4

=item concat example 3

  # given: synopsis

  package main;

  use Venus 'concat';

  my $concat = concat 'hello', 'world';

  # "hello world"

=back

=over 4

=item concat example 4

  # given: synopsis

  package main;

  use Venus 'concat';

  my $concat = concat 'value is', [1,2];

  # "value is [1,2]"

=back

=over 4

=item concat example 5

  # given: synopsis

  package main;

  use Venus 'concat';

  my $concat = concat 'value is', [1,2], 'and', [3,4];

  # "value is [1,2] and [3,4]"

=back

=cut

=head2 config

  config(hashref $value, string | coderef $code, any @args) (any)

The config function builds and returns a L<Venus::Config> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item config example 1

  package main;

  use Venus 'config';

  my $config = config {};

  # bless({...}, 'Venus::Config')

=back

=over 4

=item config example 2

  package main;

  use Venus 'config';

  my $config = config {}, 'read_perl', '{"data"=>1}';

  # bless({...}, 'Venus::Config')

=back

=cut

=head2 cop

  cop(string | object | coderef $self, string $name) (coderef)

The cop function attempts to curry the given subroutine on the object or class
and if successful returns a closure.

I<Since C<2.32>>

=over 4

=item cop example 1

  package main;

  use Venus 'cop';

  my $coderef = cop('Digest::SHA', 'sha1_hex');

  # sub { ... }

=back

=over 4

=item cop example 2

  package main;

  use Venus 'cop';

  require Digest::SHA;

  my $coderef = cop(Digest::SHA->new, 'digest');

  # sub { ... }

=back

=cut

=head2 data

  data(string $value, string | coderef $code, any @args) (any)

The data function builds and returns a L<Venus::Data> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item data example 1

  package main;

  use Venus 'data';

  my $data = data 't/data/sections';

  # bless({...}, 'Venus::Data')

=back

=over 4

=item data example 2

  package main;

  use Venus 'data';

  my $data = data 't/data/sections', 'string', undef, 'name';

  # "Example #1\nExample #2"

=back

=cut

=head2 date

  date(number $value, string | coderef $code, any @args) (any)

The date function builds and returns a L<Venus::Date> object, or dispatches to
the coderef or method provided.

I<Since C<2.40>>

=over 4

=item date example 1

  package main;

  use Venus 'date';

  my $date = date time, 'string';

  # '0000-00-00T00:00:00Z'

=back

=over 4

=item date example 2

  package main;

  use Venus 'date';

  my $date = date time, 'reset', 570672000;

  # bless({...}, 'Venus::Date')

  # $date->string;

  # '1988-02-01T00:00:00Z'

=back

=over 4

=item date example 3

  package main;

  use Venus 'date';

  my $date = date time;

  # bless({...}, 'Venus::Date')

=back

=cut

=head2 docs

  docs(any @args) (any)

The docs function builds a L<Venus::Data> object using L<Venus::Data/docs> for
the current file, i.e. L<perlfunc/__FILE__> or script, i.e. C<$0>, and returns
the result of a L<Venus::Data/string> operation using the arguments provided.

I<Since C<3.30>>

=over 4

=item docs example 1

  package main;

  use Venus 'docs';

  # =head1 ABSTRACT
  #
  # Example Abstract
  #
  # =cut

  my $docs = docs 'head1', 'ABSTRACT';

  # "Example Abstract"

=back

=over 4

=item docs example 2

  package main;

  use Venus 'docs';

  # =head1 NAME
  #
  # Example #1
  #
  # =cut
  #
  # =head1 NAME
  #
  # Example #2
  #
  # =cut

  my $docs = docs 'head1', 'NAME';

  # "Example #1\nExample #2"

=back

=cut

=head2 enum

  enum(arrayref | hashref $value) (Venus::Enum)

The enum function builds and returns a L<Venus::Enum> object.

I<Since C<3.55>>

=over 4

=item enum example 1

  package main;

  use Venus 'enum';

  my $themes = enum ['light', 'dark'];

  # bless({scope => sub{...}}, "Venus::Enum")

  # my $result = $themes->get('dark');

  # bless({scope => sub{...}}, "Venus::Enum")

  # "$result"

  # "dark"

=back

=over 4

=item enum example 2

  package main;

  use Venus 'enum';

  my $themes = enum {
    light => 'light_theme',
    dark => 'dark_theme',
  };

  # bless({scope => sub{...}}, "Venus::Enum")

  # my $result = $themes->get('dark');

  # bless({scope => sub{...}}, "Venus::Enum")

  # "$result"

  # "dark_theme"

=back

=cut

=head2 error

  error(maybe[hashref] $args) (Venus::Error)

The error function throws a L<Venus::Error> exception object using the
exception object arguments provided.

I<Since C<0.01>>

=over 4

=item error example 1

  package main;

  use Venus 'error';

  my $error = error;

  # bless({...}, 'Venus::Error')

=back

=over 4

=item error example 2

  package main;

  use Venus 'error';

  my $error = error {
    message => 'Something failed!',
  };

  # bless({message => 'Something failed!', ...}, 'Venus::Error')

=back

=cut

=head2 factory

  factory(hashref $value, string | coderef $code, any @args) (any)

The factory function builds and returns a L<Venus::Factory> object, or
dispatches to the coderef or method provided.

I<Since C<4.15>>

=over 4

=item factory example 1

  package main;

  use Venus 'factory';

  my $factory = factory {};

  # bless(..., 'Venus::Factory')

=back

=over 4

=item factory example 2

  package main;

  use Venus 'factory';

  my $path = factory {name => 'path', value => ['/tmp/log']}, 'class', 'Venus::Path';

  # bless(..., 'Venus::Factory')

  # $path->build;

  # bless({value => '/tmp/log'}, 'Venus::Path')

=back

=cut

=head2 false

  false() (boolean)

The false function returns a falsy boolean value which is designed to be
practically indistinguishable from the conventional numerical C<0> value.

I<Since C<0.01>>

=over 4

=item false example 1

  package main;

  use Venus;

  my $false = false;

  # 0

=back

=over 4

=item false example 2

  package main;

  use Venus;

  my $true = !false;

  # 1

=back

=cut

=head2 fault

  fault(string $args) (Venus::Fault)

The fault function throws a L<Venus::Fault> exception object and represents a
system failure, and isn't meant to be caught.

I<Since C<1.80>>

=over 4

=item fault example 1

  package main;

  use Venus 'fault';

  my $fault = fault;

  # bless({message => 'Exception!'}, 'Venus::Fault')

=back

=over 4

=item fault example 2

  package main;

  use Venus 'fault';

  my $fault = fault 'Something failed!';

  # bless({message => 'Something failed!'}, 'Venus::Fault')

=back

=cut

=head2 flat

  flat(any @args) (any)

The flat function take a list of arguments and flattens them where possible and
returns the list of flattened values. When a hashref is encountered, it will be
flattened into key/value pairs. When an arrayref is encountered, it will be
flattened into a list of items.

I<Since C<4.15>>

=over 4

=item flat example 1

  package main;

  use Venus 'flat';

  my @flat = flat 1, 2, 3;

  # (1, 2, 3)

=back

=over 4

=item flat example 2

  package main;

  use Venus 'flat';

  my @flat = flat 1, 2, 3, [1, 2, 3];

  # (1, 2, 3, 1, 2, 3)

=back

=over 4

=item flat example 3

  package main;

  use Venus 'flat';

  my @flat = flat 1, 2, 3, [1, 2, 3], {1, 2};

  # (1, 2, 3, 1, 2, 3, 1, 2)

=back

=cut

=head2 float

  float(string $value, string | coderef $code, any @args) (any)

The float function builds and returns a L<Venus::Float> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item float example 1

  package main;

  use Venus 'float';

  my $float = float 1.23;

  # bless({...}, 'Venus::Float')

=back

=over 4

=item float example 2

  package main;

  use Venus 'float';

  my $float = float 1.23, 'int';

  # 1

=back

=cut

=head2 future

  future(coderef $code) (Venus::Future)

The future function builds and returns a L<Venus::Future> object.

I<Since C<3.55>>

=over 4

=item future example 1

  package main;

  use Venus 'future';

  my $future = future(sub{
    my ($resolve, $reject) = @_;

    return int(rand(2)) ? $resolve->result('pass') : $reject->result('fail');
  });

  # bless(..., "Venus::Future")

  # $future->is_pending;

  # false

=back

=cut

=head2 gather

  gather(any $value, coderef $callback) (any)

The gather function builds a L<Venus::Gather> object, passing it and the value
provided to the callback provided, and returns the return value from
L<Venus::Gather/result>.

I<Since C<2.50>>

=over 4

=item gather example 1

  package main;

  use Venus 'gather';

  my $gather = gather ['a'..'d'];

  # bless({...}, 'Venus::Gather')

  # $gather->result;

  # undef

=back

=over 4

=item gather example 2

  package main;

  use Venus 'gather';

  my $gather = gather ['a'..'d'], sub {{
    a => 1,
    b => 2,
    c => 3,
  }};

  # [1..3]

=back

=over 4

=item gather example 3

  package main;

  use Venus 'gather';

  my $gather = gather ['e'..'h'], sub {{
    a => 1,
    b => 2,
    c => 3,
  }};

  # []

=back

=over 4

=item gather example 4

  package main;

  use Venus 'gather';

  my $gather = gather ['a'..'d'], sub {
    my ($case) = @_;

    $case->when(sub{lc($_) eq 'a'})->then('a -> A');
    $case->when(sub{lc($_) eq 'b'})->then('b -> B');
  };

  # ['a -> A', 'b -> B']

=back

=over 4

=item gather example 5

  package main;

  use Venus 'gather';

  my $gather = gather ['a'..'d'], sub {

    $_->when(sub{lc($_) eq 'a'})->then('a -> A');
    $_->when(sub{lc($_) eq 'b'})->then('b -> B');
  };

  # ['a -> A', 'b -> B']

=back

=cut

=head2 gets

  gets(string @args) (arrayref)

The gets function select values from within the underlying data structure using
L<Venus::Array/path> or L<Venus::Hash/path>, where each argument is a selector,
returns all the values selected. Returns a list in list context.

I<Since C<4.15>>

=over 4

=item gets example 1

  package main;

  use Venus 'gets';

  my $data = {'foo' => {'bar' => 'baz'}, 'bar' => ['baz']};

  my $gets = gets $data, 'bar', 'foo.bar';

  # [['baz'], 'baz']

=back

=over 4

=item gets example 2

  package main;

  use Venus 'gets';

  my $data = {'foo' => {'bar' => 'baz'}, 'bar' => ['baz']};

  my ($bar, $foo_bar) = gets $data, 'bar', 'foo.bar';

  # (['baz'], 'baz')

=back

=over 4

=item gets example 3

  package main;

  use Venus 'gets';

  my $data = ['foo', {'bar' => 'baz'}, 'bar', ['baz']];

  my $gets = gets $data, '3', '1.bar';

  # [['baz'], 'baz']

=back

=over 4

=item gets example 4

  package main;

  use Venus 'gets';

  my $data = ['foo', {'bar' => 'baz'}, 'bar', ['baz']];

  my ($baz, $one_bar) = gets $data, '3', '1.bar';

  # (['baz'], 'baz')

=back

=cut

=head2 hash

  hash(hashref $value, string | coderef $code, any @args) (any)

The hash function builds and returns a L<Venus::Hash> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item hash example 1

  package main;

  use Venus 'hash';

  my $hash = hash {1..4};

  # bless({...}, 'Venus::Hash')

=back

=over 4

=item hash example 2

  package main;

  use Venus 'hash';

  my $hash = hash {1..8}, 'pairs';

  # [[1, 2], [3, 4], [5, 6], [7, 8]]

=back

=cut

=head2 hashref

  hashref(any @args) (hashref)

The hashref function takes a list of arguments and returns a hashref.

I<Since C<3.10>>

=over 4

=item hashref example 1

  package main;

  use Venus 'hashref';

  my $hashref = hashref(content => 'example');

  # {content => "example"}

=back

=over 4

=item hashref example 2

  package main;

  use Venus 'hashref';

  my $hashref = hashref({content => 'example'});

  # {content => "example"}

=back

=over 4

=item hashref example 3

  package main;

  use Venus 'hashref';

  my $hashref = hashref('content');

  # {content => undef}

=back

=over 4

=item hashref example 4

  package main;

  use Venus 'hashref';

  my $hashref = hashref('content', 'example', 'algorithm');

  # {content => "example", algorithm => undef}

=back

=cut

=head2 in

  in(arrayref | hashref | consumes[Venus::Role::Mappable] $lvalue, any $rvalue) (boolean)

The in function accepts an arrayref, hashref, or
L<"mappable"|Venus::Role::Mappable> and returns true if the type and value of
the rvalue is the same for any items in the collection.

I<Since C<4.15>>

=over 4

=item in example 1

  # given: synopsis

  package main;

  use Venus 'in';

  my $in = in [1, '1'], 1;

  # true

=back

=over 4

=item in example 2

  # given: synopsis

  package main;

  use Venus 'in';

  my $in = in [1, 1], 0;

  # false

=back

=over 4

=item in example 3

  # given: synopsis

  package main;

  use Venus 'in';

  my $in = in {1, 2}, 1;

  # false

=back

=over 4

=item in example 4

  # given: synopsis

  package main;

  use Venus 'in';

  my $in = in {1, 1}, 1;

  # true

=back

=over 4

=item in example 5

  # given: synopsis

  package main;

  use Venus 'in';

  my $in = in [[0], [1]], [1];

  # true

=back

=cut

=head2 is

  is(any $lvalue, any $rvalue) (boolean)

The is function returns true if the lvalue and rvalue are identical, i.e.
refers to the same memory address, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is example 1

  # given: synopsis

  package main;

  use Venus 'is';

  my $is = is 1, 1;

  # false

=back

=over 4

=item is example 2

  # given: synopsis

  package main;

  use Venus 'is', 'number';

  my $a = number 1;

  my $is = is $a, 1;

  # false

=back

=over 4

=item is example 3

  # given: synopsis

  package main;

  use Venus 'is', 'number';

  my $a = number 1;

  my $is = is $a, $a;

  # true

=back

=over 4

=item is example 4

  # given: synopsis

  package main;

  use Venus 'is', 'number';

  my $a = number 1;
  my $b = number 1;

  my $is = is $a, $b;

  # false

=back

=cut

=head2 is_blessed

  is_blessed(any $data) (boolean)

The is_blessed function uses L</check> to validate that the data provided is an
object returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_blessed example 1

  # given: synopsis

  package main;

  use Venus 'is_blessed';

  my $is_blessed = is_blessed bless {};

  # true

=back

=over 4

=item is_blessed example 2

  # given: synopsis

  package main;

  use Venus 'is_blessed';

  my $is_blessed = is_blessed {};

  # false

=back

=cut

=head2 is_boolean

  is_boolean(any $data) (boolean)

The is_boolean function uses L</check> to validate that the data provided is a
boolean returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_boolean example 1

  # given: synopsis

  package main;

  use Venus 'is_boolean';

  my $is_boolean = is_boolean true;

  # true

=back

=over 4

=item is_boolean example 2

  # given: synopsis

  package main;

  use Venus 'is_boolean';

  my $is_boolean = is_boolean 1;

  # false

=back

=cut

=head2 is_coderef

  is_coderef(any $data) (boolean)

The is_coderef function uses L</check> to validate that the data provided is a
coderef returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_coderef example 1

  # given: synopsis

  package main;

  use Venus 'is_coderef';

  my $is_coderef = is_coderef sub{};

  # true

=back

=over 4

=item is_coderef example 2

  # given: synopsis

  package main;

  use Venus 'is_coderef';

  my $is_coderef = is_coderef {};

  # false

=back

=cut

=head2 is_dirhandle

  is_dirhandle(any $data) (boolean)

The is_dirhandle function uses L</check> to validate that the data provided is
a dirhandle returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_dirhandle example 1

  # given: synopsis

  package main;

  use Venus 'is_dirhandle';

  opendir my $dh, 't';

  my $is_dirhandle = is_dirhandle $dh;

  # true

=back

=over 4

=item is_dirhandle example 2

  # given: synopsis

  package main;

  use Venus 'is_dirhandle';

  open my $fh, '<', 't/data/moon';

  my $is_dirhandle = is_dirhandle $fh;

  # false

=back

=cut

=head2 is_enum

  is_enum(any $data, value @args) (boolean)

The is_enum function uses L</check> to validate that the data provided is an
enum returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_enum example 1

  # given: synopsis

  package main;

  use Venus 'is_enum';

  my $is_enum = is_enum 'yes', 'yes', 'no'

  # true

=back

=over 4

=item is_enum example 2

  # given: synopsis

  package main;

  use Venus 'is_enum';

  my $is_enum = is_enum 'yes', 'Yes', 'No';

  # false

=back

=cut

=head2 is_error

  is_error(any $data, string | coderef $code, any @args) (boolean)

The is_error function accepts a scalar value and returns true if the value is
(or is derived from) L<Venus::Error>. This function can dispatch method calls
and execute callbacks, and returns true of the return value from the callback
is truthy, and false otherwise.

I<Since C<4.15>>

=over 4

=item is_error example 1

  package main;

  use Venus 'is_error';

  my $is_error = is_error 0;

  # false

=back

=over 4

=item is_error example 2

  package main;

  use Venus 'is_error';

  my $is_error = is_error 1;

  # false

=back

=over 4

=item is_error example 3

  package main;

  use Venus 'catch', 'fault', 'is_error';

  my $fault = catch {fault};

  my $is_error = is_error $fault;

  # false

=back

=over 4

=item is_error example 4

  package main;

  use Venus 'catch', 'error', 'is_error';

  my $error = catch {error};

  my $is_error = is_error $error;

  # true

=back

=over 4

=item is_error example 5

  package main;

  use Venus 'catch', 'error', 'is_error';

  my $error = catch {error {verbose => true}};

  my $is_error = is_error $error, 'verbose';

  # true

=back

=over 4

=item is_error example 6

  package main;

  use Venus 'catch', 'error', 'is_error';

  my $error = catch {error {verbose => false}};

  my $is_error = is_error $error, 'verbose';

  # false

=back

=cut

=head2 is_false

  is_false(any $data, string | coderef $code, any @args) (boolean)

The is_false function accepts a scalar value and returns true if the value is
falsy. This function can dispatch method calls and execute callbacks.

I<Since C<3.04>>

=over 4

=item is_false example 1

  package main;

  use Venus 'is_false';

  my $is_false = is_false 0;

  # true

=back

=over 4

=item is_false example 2

  package main;

  use Venus 'is_false';

  my $is_false = is_false 1;

  # false

=back

=over 4

=item is_false example 3

  package main;

  use Venus 'array', 'is_false';

  my $array = array [];

  my $is_false = is_false $array;

  # false

=back

=over 4

=item is_false example 4

  package main;

  use Venus 'array', 'is_false';

  my $array = array [];

  my $is_false = is_false $array, 'count';

  # true

=back

=over 4

=item is_false example 5

  package main;

  use Venus 'array', 'is_false';

  my $array = array [1];

  my $is_false = is_false $array, 'count';

  # false

=back

=over 4

=item is_false example 6

  package main;

  use Venus 'is_false';

  my $array = undef;

  my $is_false = is_false $array, 'count';

  # true

=back

=cut

=head2 is_fault

  is_fault(any $data) (boolean)

The is_fault function accepts a scalar value and returns true if the value is
(or is derived from) L<Venus::Fault>.

I<Since C<4.15>>

=over 4

=item is_fault example 1

  package main;

  use Venus 'is_fault';

  my $is_fault = is_fault 0;

  # false

=back

=over 4

=item is_fault example 2

  package main;

  use Venus 'is_fault';

  my $is_fault = is_fault 1;

  # false

=back

=over 4

=item is_fault example 3

  package main;

  use Venus 'catch', 'fault', 'is_fault';

  my $fault = catch {fault};

  my $is_fault = is_fault $fault;

  # true

=back

=over 4

=item is_fault example 4

  package main;

  use Venus 'catch', 'error', 'is_fault';

  my $error = catch {error};

  my $is_fault = is_fault $error;

  # false

=back

=cut

=head2 is_filehandle

  is_filehandle(any $data) (boolean)

The is_filehandle function uses L</check> to validate that the data provided is
a filehandle returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_filehandle example 1

  # given: synopsis

  package main;

  use Venus 'is_filehandle';

  open my $fh, '<', 't/data/moon';

  my $is_filehandle = is_filehandle $fh;

  # true

=back

=over 4

=item is_filehandle example 2

  # given: synopsis

  package main;

  use Venus 'is_filehandle';

  opendir my $dh, 't';

  my $is_filehandle = is_filehandle $dh;

  # false

=back

=cut

=head2 is_float

  is_float(any $data) (boolean)

The is_float function uses L</check> to validate that the data provided is a
float returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_float example 1

  # given: synopsis

  package main;

  use Venus 'is_float';

  my $is_float = is_float .123;

  # true

=back

=over 4

=item is_float example 2

  # given: synopsis

  package main;

  use Venus 'is_float';

  my $is_float = is_float 123;

  # false

=back

=cut

=head2 is_glob

  is_glob(any $data) (boolean)

The is_glob function uses L</check> to validate that the data provided is a
glob returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_glob example 1

  # given: synopsis

  package main;

  use Venus 'is_glob';

  my $is_glob = is_glob \*main;

  # true

=back

=over 4

=item is_glob example 2

  # given: synopsis

  package main;

  use Venus 'is_glob';

  my $is_glob = is_glob *::main;

  # false

=back

=cut

=head2 is_hashref

  is_hashref(any $data) (boolean)

The is_hashref function uses L</check> to validate that the data provided is a
hashref returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_hashref example 1

  # given: synopsis

  package main;

  use Venus 'is_hashref';

  my $is_hashref = is_hashref {};

  # true

=back

=over 4

=item is_hashref example 2

  # given: synopsis

  package main;

  use Venus 'is_hashref';

  my $is_hashref = is_hashref [];

  # false

=back

=cut

=head2 is_number

  is_number(any $data) (boolean)

The is_number function uses L</check> to validate that the data provided is a
number returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_number example 1

  # given: synopsis

  package main;

  use Venus 'is_number';

  my $is_number = is_number 0;

  # true

=back

=over 4

=item is_number example 2

  # given: synopsis

  package main;

  use Venus 'is_number';

  my $is_number = is_number '0';

  # false

=back

=cut

=head2 is_object

  is_object(any $data) (boolean)

The is_object function uses L</check> to validate that the data provided is an
object returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_object example 1

  # given: synopsis

  package main;

  use Venus 'is_object';

  my $is_object = is_object bless {};

  # true

=back

=over 4

=item is_object example 2

  # given: synopsis

  package main;

  use Venus 'is_object';

  my $is_object = is_object {};

  # false

=back

=cut

=head2 is_package

  is_package(any $data) (boolean)

The is_package function uses L</check> to validate that the data provided is a
package returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_package example 1

  # given: synopsis

  package main;

  use Venus 'is_package';

  my $is_package = is_package 'Venus';

  # true

=back

=over 4

=item is_package example 2

  # given: synopsis

  package main;

  use Venus 'is_package';

  my $is_package = is_package 'Example';

  # false

=back

=cut

=head2 is_reference

  is_reference(any $data) (boolean)

The is_reference function uses L</check> to validate that the data provided is
a reference returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_reference example 1

  # given: synopsis

  package main;

  use Venus 'is_reference';

  my $is_reference = is_reference \0;

  # true

=back

=over 4

=item is_reference example 2

  # given: synopsis

  package main;

  use Venus 'is_reference';

  my $is_reference = is_reference 0;

  # false

=back

=cut

=head2 is_regexp

  is_regexp(any $data) (boolean)

The is_regexp function uses L</check> to validate that the data provided is a
regexp returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_regexp example 1

  # given: synopsis

  package main;

  use Venus 'is_regexp';

  my $is_regexp = is_regexp qr/hello/;

  # true

=back

=over 4

=item is_regexp example 2

  # given: synopsis

  package main;

  use Venus 'is_regexp';

  my $is_regexp = is_regexp 'hello';

  # false

=back

=cut

=head2 is_scalarref

  is_scalarref(any $data) (boolean)

The is_scalarref function uses L</check> to validate that the data provided is
a scalarref returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_scalarref example 1

  # given: synopsis

  package main;

  use Venus 'is_scalarref';

  my $is_scalarref = is_scalarref \1;

  # true

=back

=over 4

=item is_scalarref example 2

  # given: synopsis

  package main;

  use Venus 'is_scalarref';

  my $is_scalarref = is_scalarref 1;

  # false

=back

=cut

=head2 is_string

  is_string(any $data) (boolean)

The is_string function uses L</check> to validate that the data provided is a
string returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_string example 1

  # given: synopsis

  package main;

  use Venus 'is_string';

  my $is_string = is_string '0';

  # true

=back

=over 4

=item is_string example 2

  # given: synopsis

  package main;

  use Venus 'is_string';

  my $is_string = is_string 0;

  # false

=back

=cut

=head2 is_true

  is_true(any $data, string | coderef $code, any @args) (boolean)

The is_true function accepts a scalar value and returns true if the value is
truthy. This function can dispatch method calls and execute callbacks.

I<Since C<3.04>>

=over 4

=item is_true example 1

  package main;

  use Venus 'is_true';

  my $is_true = is_true 1;

  # true

=back

=over 4

=item is_true example 2

  package main;

  use Venus 'is_true';

  my $is_true = is_true 0;

  # false

=back

=over 4

=item is_true example 3

  package main;

  use Venus 'array', 'is_true';

  my $array = array [];

  my $is_true = is_true $array;

  # true

=back

=over 4

=item is_true example 4

  package main;

  use Venus 'array', 'is_true';

  my $array = array [];

  my $is_true = is_true $array, 'count';

  # false

=back

=over 4

=item is_true example 5

  package main;

  use Venus 'array', 'is_true';

  my $array = array [1];

  my $is_true = is_true $array, 'count';

  # true

=back

=over 4

=item is_true example 6

  package main;

  use Venus 'is_true';

  my $array = undef;

  my $is_true = is_true $array, 'count';

  # false

=back

=cut

=head2 is_undef

  is_undef(any $data) (boolean)

The is_undef function uses L</check> to validate that the data provided is an
undef returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_undef example 1

  # given: synopsis

  package main;

  use Venus 'is_undef';

  my $is_undef = is_undef undef;

  # true

=back

=over 4

=item is_undef example 2

  # given: synopsis

  package main;

  use Venus 'is_undef';

  my $is_undef = is_undef '';

  # false

=back

=cut

=head2 is_value

  is_value(any $data) (boolean)

The is_value function uses L</check> to validate that the data provided is an
value returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_value example 1

  # given: synopsis

  package main;

  use Venus 'is_value';

  my $is_value = is_value 0;

  # true

=back

=over 4

=item is_value example 2

  # given: synopsis

  package main;

  use Venus 'is_value';

  my $is_value = is_value sub{};

  # false

=back

=cut

=head2 is_yesno

  is_yesno(any $data) (boolean)

The is_yesno function uses L</check> to validate that the data provided is a
yesno returns true, otherwise returns false.

I<Since C<4.15>>

=over 4

=item is_yesno example 1

  # given: synopsis

  package main;

  use Venus 'is_yesno';

  my $is_yesno = is_yesno 0;

  # true

=back

=over 4

=item is_yesno example 2

  # given: synopsis

  package main;

  use Venus 'is_yesno';

  my $is_yesno = is_yesno undef;

  # false

=back

=cut

=head2 json

  json(string $call, any $data) (any)

The json function builds a L<Venus::Json> object and will either
L<Venus::Json/decode> or L<Venus::Json/encode> based on the argument provided
and returns the result.

I<Since C<2.40>>

=over 4

=item json example 1

  package main;

  use Venus 'json';

  my $decode = json 'decode', '{"codename":["Ready","Robot"],"stable":true}';

  # { codename => ["Ready", "Robot"], stable => 1 }

=back

=over 4

=item json example 2

  package main;

  use Venus 'json';

  my $encode = json 'encode', { codename => ["Ready", "Robot"], stable => true };

  # '{"codename":["Ready","Robot"],"stable":true}'

=back

=over 4

=item json example 3

  package main;

  use Venus 'json';

  my $json = json;

  # bless({...}, 'Venus::Json')

=back

=over 4

=item json example 4

  package main;

  use Venus 'json';

  my $json = json 'class', {data => "..."};

  # Exception! (isa Venus::Fault)

=back

=cut

=head2 list

  list(any @args) (any)

The list function accepts a list of values and flattens any arrayrefs,
returning a list of scalars.

I<Since C<3.04>>

=over 4

=item list example 1

  package main;

  use Venus 'list';

  my @list = list 1..4;

  # (1..4)

=back

=over 4

=item list example 2

  package main;

  use Venus 'list';

  my @list = list [1..4];

  # (1..4)

=back

=over 4

=item list example 3

  package main;

  use Venus 'list';

  my @list = list [1..4], 5, [6..10];

  # (1..10)

=back

=cut

=head2 load

  load(any $name) (Venus::Space)

The load function loads the package provided and returns a L<Venus::Space> object.

I<Since C<2.32>>

=over 4

=item load example 1

  package main;

  use Venus 'load';

  my $space = load 'Venus::Scalar';

  # bless({value => 'Venus::Scalar'}, 'Venus::Space')

=back

=cut

=head2 log

  log(any @args) (Venus::Log)

The log function prints the arguments provided to STDOUT, stringifying complex
values, and returns a L<Venus::Log> object. If the first argument is a log
level name, e.g. C<debug>, C<error>, C<fatal>, C<info>, C<trace>, or C<warn>,
it will be used when emitting the event. The desired log level is specified by
the C<VENUS_LOG_LEVEL> environment variable and defaults to C<trace>.

I<Since C<2.40>>

=over 4

=item log example 1

  package main;

  use Venus 'log';

  my $log = log;

  # bless({...}, 'Venus::Log')

  # log time, rand, 1..9;

  # 00000000 0.000000, 1..9

=back

=cut

=head2 make

  make(string $package, any @args) (any)

The make function L<"calls"|Venus/call> the C<new> routine on the invocant and
returns the result which should be a package string or an object.

I<Since C<2.32>>

=over 4

=item make example 1

  package main;

  use Venus 'make';

  my $made = make('Digest::SHA');

  # bless(do{\(my $o = '...')}, 'Digest::SHA')

=back

=over 4

=item make example 2

  package main;

  use Venus 'make';

  my $made = make('Digest', 'SHA');

  # bless(do{\(my $o = '...')}, 'Digest::SHA')

=back

=cut

=head2 map

  map(hashref $value) (Venus::Map)

The map function returns a L<Venus::Map> object for the hashref provided.

I<Since C<4.15>>

=over 4

=item map example 1

  package main;

  use Venus;

  my $map = Venus::map {1..4};

  # bless(..., 'Venus::Map')

=back

=over 4

=item map example 2

  package main;

  use Venus;

  my $map = Venus::map {1..4}, 'count';

  # 2

=back

=cut

=head2 match

  match(any $value, coderef $callback) (any)

The match function builds a L<Venus::Match> object, passing it and the value
provided to the callback provided, and returns the return value from
L<Venus::Match/result>.

I<Since C<2.50>>

=over 4

=item match example 1

  package main;

  use Venus 'match';

  my $match = match 5;

  # bless({...}, 'Venus::Match')

  # $match->result;

  # undef

=back

=over 4

=item match example 2

  package main;

  use Venus 'match';

  my $match = match 5, sub {{
    1 => 'one',
    2 => 'two',
    5 => 'five',
  }};

  # 'five'

=back

=over 4

=item match example 3

  package main;

  use Venus 'match';

  my $match = match 5, sub {{
    1 => 'one',
    2 => 'two',
    3 => 'three',
  }};

  # undef

=back

=over 4

=item match example 4

  package main;

  use Venus 'match';

  my $match = match 5, sub {
    my ($case) = @_;

    $case->when(sub{$_ < 5})->then('< 5');
    $case->when(sub{$_ > 5})->then('> 5');
  };

  # undef

=back

=over 4

=item match example 5

  package main;

  use Venus 'match';

  my $match = match 6, sub {
    my ($case, $data) = @_;

    $case->when(sub{$_ < 5})->then("$data < 5");
    $case->when(sub{$_ > 5})->then("$data > 5");
  };

  # '6 > 5'

=back

=over 4

=item match example 6

  package main;

  use Venus 'match';

  my $match = match 4, sub {

    $_->when(sub{$_ < 5})->then("$_[1] < 5");
    $_->when(sub{$_ > 5})->then("$_[1] > 5");
  };

  # '4 < 5'

=back

=cut

=head2 merge

  merge(any @args) (any)

The merge function returns a value which is a merger of all of the arguments
provided. This function is an alias for L</merge_join> given the principle of
least surprise.

I<Since C<2.32>>

=over 4

=item merge example 1

  package main;

  use Venus 'merge';

  my $merged = merge({1..4}, {5, 6});

  # {1..6}

=back

=over 4

=item merge example 2

  package main;

  use Venus 'merge';

  my $merged = merge({1..4}, {5, 6}, {7, 8, 9, 0});

  # {1..9, 0}

=back

=cut

=head2 merge_flat

  merge_flat(any @args) (any)

The merge_flat function merges two (or more) values and returns a new values
based on the types of the inputs:

B<Note:> This function appends hashref values to an arrayref when encountered.

=over 4

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "hashref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "scalar" we
append the C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "arrayref"
we append the items in C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "hashref" we
append the values in C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "hashref" we
append the keys and values in C<rvalue> to the C<lvalue>, overwriting existing
keys where there's overlap.

=back

I<Since C<4.15>>

=over 4

=item merge_flat example 1

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat;

  # undef

=back

=over 4

=item merge_flat example 2

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat 1;

  # 1

=back

=over 4

=item merge_flat example 3

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat 1, 2;

  # 2

=back

=over 4

=item merge_flat example 4

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat 1, [2, 3];

  # [2, 3]

=back

=over 4

=item merge_flat example 5

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat 1, {a => 1};

  # {a => 1}

=back

=over 4

=item merge_flat example 6

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat [1, 2], 3;

  # [1, 2, 3]

=back

=over 4

=item merge_flat example 7

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat [1, 2], {a => 3, b => 4};

  # [1, 2, 3, 4]

=back

=over 4

=item merge_flat example 8

  # given: synopsis

  package main;

  use Venus 'merge_flat';

  my $merge_flat = merge_flat(
    {
      a => 1,
      b => {x => 10},
      d => 0,
      g => [4],
    },
    {
      b => {y => 20},
      c => 3,
      e => [5],
      f => [6]
    },
    {
      b => {z => 456},
      c => {z => 123},
      d => 2,
      e => [6, 7],
      f => {7, 8},
      g => 5,
    },
  );

  # {
  #   a => 1,
  #   b => {
  #     x => 10,
  #     y => 20,
  #     z => 456
  #   },
  #   c => {z => 123},
  #   d => 2,
  #   e => [5, 6, 7],
  #   f => [6, 8],
  #   g => [4, 5],
  # }

=back

=cut

=head2 merge_flat_mutate

  merge_flat_mutate(any @args) (any)

The merge_flat_mutate performs a merge operaiton in accordance with
L</merge_flat> except that it mutates the values being merged and returns the
mutated value.

I<Since C<4.15>>

=over 4

=item merge_flat_mutate example 1

  # given: synopsis

  package main;

  use Venus 'merge_flat_mutate';

  my $merge_flat_mutate = merge_flat_mutate;

  # undef

=back

=over 4

=item merge_flat_mutate example 2

  # given: synopsis

  package main;

  use Venus 'merge_flat_mutate';

  my $merge_flat_mutate = merge_flat_mutate 1;

  # 1

=back

=over 4

=item merge_flat_mutate example 3

  # given: synopsis

  package main;

  use Venus 'merge_flat_mutate';

  $result = 1;

  my $merge_flat_mutate = merge_flat_mutate $result, 2;

  # 2

  $result;

  # 2

=back

=over 4

=item merge_flat_mutate example 4

  # given: synopsis

  package main;

  use Venus 'merge_flat_mutate';

  $result = 1;

  my $merge_flat_mutate = merge_flat_mutate $result, [2, 3];

  # [2, 3]

  $result;

  # [2, 3]

=back

=over 4

=item merge_flat_mutate example 5

  # given: synopsis

  package main;

  use Venus 'merge_flat_mutate';

  $result = 1;

  my $merge_flat_mutate = merge_flat_mutate $result, {a => 1};

  # {a => 1}

  $result;

  # {a => 1}

=back

=over 4

=item merge_flat_mutate example 6

  # given: synopsis

  package main;

  use Venus 'merge_flat_mutate';

  $result = [1, 2];

  my $merge_flat_mutate = merge_flat_mutate $result, 3;

  # [1, 2, 3]

  $result;

  # [1, 2, 3]

=back

=over 4

=item merge_flat_mutate example 7

  # given: synopsis

  package main;

  use Venus 'merge_flat_mutate';

  $result = [1, 2];

  my $merge_flat_mutate = merge_flat_mutate $result, {a => 3, b => 4};

  # [1, 2, 3, 4]

  $result;

  # [1, 2, 3, 4]

=back

=cut

=head2 merge_join

  merge_join(any @args) (any)

The merge_join merges two (or more) values and returns a new values based on
the types of the inputs:

B<Note:> This function merges hashrefs with hashrefs, and appends arrayrefs
with arrayrefs.

=over 4

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "hashref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "scalar" we
append the C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "arrayref"
we append the items in C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "hashref" we
append the C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "hashref" we
append the keys and values in C<rvalue> to the C<lvalue>, overwriting existing
keys where there's overlap.

=back

I<Since C<4.15>>

=over 4

=item merge_join example 1

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join;

  # undef

=back

=over 4

=item merge_join example 2

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join 1;

  # 1

=back

=over 4

=item merge_join example 3

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join 1, 2;

  # 2

=back

=over 4

=item merge_join example 4

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join 1, [2, 3];

  # [2, 3]

=back

=over 4

=item merge_join example 5

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join [1, 2], 3;

  # [1, 2, 3]

=back

=over 4

=item merge_join example 6

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join [1, 2], [3, 4];

  # [1, 2, 3, 4]

=back

=over 4

=item merge_join example 7

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join {a => 1}, {a => 2, b => 3};

  # {a => 2, b => 3}

=back

=over 4

=item merge_join example 8

  # given: synopsis

  package main;

  use Venus 'merge_join';

  my $merge_join = merge_join(
    {
      a => 1,
      b => {x => 10},
      d => 0,
      g => [4],
    },
    {
      b => {y => 20},
      c => 3,
      e => [5],
      f => [6]
    },
    {
      b => {z => 456},
      c => {z => 123},
      d => 2,
      e => [6, 7],
      f => {7, 8},
      g => 5,
    },
  );

  # {
  #   a => 1,
  #   b => {
  #     x => 10,
  #     y => 20,
  #     z => 456
  #   },
  #   c => {z => 123},
  #   d => 2,
  #   e => [5, 6, 7],
  #   f => [6, {7, 8}],
  #   g => [4, 5],
  # }

=back

=cut

=head2 merge_join_mutate

  merge_join_mutate(any @args) (any)

The merge_join_mutate performs a merge operaiton in accordance with
L</merge_join> except that it mutates the values being merged and returns the
mutated value.

I<Since C<4.15>>

=over 4

=item merge_join_mutate example 1

  # given: synopsis

  package main;

  use Venus 'merge_join_mutate';

  my $merge_join_mutate = merge_join_mutate;

  # undef

=back

=over 4

=item merge_join_mutate example 2

  # given: synopsis

  package main;

  use Venus 'merge_join_mutate';

  my $merge_join_mutate = merge_join_mutate 1;

  # 1

=back

=over 4

=item merge_join_mutate example 3

  # given: synopsis

  package main;

  use Venus 'merge_join_mutate';

  $result = 1;

  my $merge_join_mutate = merge_join_mutate $result, 2;

  # 2

  $result;

  # 2

=back

=over 4

=item merge_join_mutate example 4

  # given: synopsis

  package main;

  use Venus 'merge_join_mutate';

  $result = 1;

  my $merge_join_mutate = merge_join_mutate $result, [2, 3];

  # [2, 3]

  $result;

  # [2, 3]

=back

=over 4

=item merge_join_mutate example 5

  # given: synopsis

  package main;

  use Venus 'merge_join_mutate';

  $result = [1, 2];

  my $merge_join_mutate = merge_join_mutate $result, 3;

  # [1, 2, 3]

  $result;

  # [1, 2, 3]

=back

=over 4

=item merge_join_mutate example 6

  # given: synopsis

  package main;

  use Venus 'merge_join_mutate';

  $result = [1, 2];

  my $merge_join_mutate = merge_join_mutate $result, [3, 4];

  # [1, 2, 3, 4]

  $result;

  # [1, 2, 3, 4]

=back

=over 4

=item merge_join_mutate example 7

  # given: synopsis

  package main;

  use Venus 'merge_join_mutate';

  $result = {a => 1};

  my $merge_join_mutate = merge_join_mutate $result, {a => 2, b => 3};

  # {a => 2, b => 3}

  $result;

  # {a => 2, b => 3}

=back

=cut

=head2 merge_keep

  merge_keep(any @args) (any)

The merge_keep function merges two (or more) values and returns a new values
based on the types of the inputs:

B<Note:> This function retains the existing data, appends arrayrefs with
arrayrefs, and only merges new keys and values when merging hashrefs with
hashrefs.

=over 4

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "scalar" we
keep the C<lvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "arrayref" we
keep the C<lvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "hashref" we
keep the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "scalar" we
append the C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "arrayref"
we append the items in C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "hashref" we
append the C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "scalar" we
keep the C<lvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "arrayref" we
keep the C<lvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "hashref" we
append the keys and values in C<rvalue> to the C<lvalue>, but without
overwriting existing keys if there's overlap.

=back

I<Since C<4.15>>

=over 4

=item merge_keep example 1

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep;

  # undef

=back

=over 4

=item merge_keep example 2

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep 1;

  # 1

=back

=over 4

=item merge_keep example 3

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep 1, 2;

  # 1

=back

=over 4

=item merge_keep example 4

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep 1, [2, 3];

  # 1

=back

=over 4

=item merge_keep example 5

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep [1, 2], 3;

  # [1, 2, 3]

=back

=over 4

=item merge_keep example 6

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep [1, 2], [3, 4];

  # [1, 2, 3, 4]

=back

=over 4

=item merge_keep example 7

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep {a => 1}, {a => 2, b => 3};

  # {a => 1, b => 3}

=back

=over 4

=item merge_keep example 8

  # given: synopsis

  package main;

  use Venus 'merge_keep';

  my $merge_keep = merge_keep(
    {
      a => 1,
      b => {x => 10},
      d => 0,
      g => [4],
    },
    {
      b => {y => 20},
      c => 3,
      e => [5],
      f => [6]
    },
    {
      b => {y => 30, z => 456},
      c => {z => 123},
      d => 2,
      e => [6, 7],
      f => {7, 8},
      g => 5,
    },
  );

  # {
  #   a => 1,
  #   b => {
  #     x => 10,
  #     y => 20,
  #     z => 456
  #   },
  #   c => 3,
  #   d => 0,
  #   e => [5, 6, 7],
  #   f => [6, {7, 8}],
  #   g => [4, 5],
  # }

=back

=cut

=head2 merge_keep_mutate

  merge_keep_mutate(any @args) (any)

The merge_keep_mutate performs a merge operaiton in accordance with
L</merge_keep> except that it mutates the values being merged and returns the
mutated value.

I<Since C<4.15>>

=over 4

=item merge_keep_mutate example 1

  # given: synopsis

  package main;

  use Venus 'merge_keep_mutate';

  my $merge_keep_mutate = merge_keep_mutate;

  # undef

=back

=over 4

=item merge_keep_mutate example 2

  # given: synopsis

  package main;

  use Venus 'merge_keep_mutate';

  my $merge_keep_mutate = merge_keep_mutate 1;

  # 1

=back

=over 4

=item merge_keep_mutate example 3

  # given: synopsis

  package main;

  use Venus 'merge_keep_mutate';

  $result = 1;

  my $merge_keep_mutate = merge_keep_mutate $result, 2;

  # 1

  $result;

  # 1

=back

=over 4

=item merge_keep_mutate example 4

  # given: synopsis

  package main;

  use Venus 'merge_keep_mutate';

  $result = 1;

  my $merge_keep_mutate = merge_keep_mutate $result, [2, 3];

  # 1

  $result;

  # 1

=back

=over 4

=item merge_keep_mutate example 5

  # given: synopsis

  package main;

  use Venus 'merge_keep_mutate';

  $result = [1, 2];

  my $merge_keep_mutate = merge_keep_mutate $result, 3;

  # [1, 2, 3]

  $result;

  # [1, 2, 3]

=back

=over 4

=item merge_keep_mutate example 6

  # given: synopsis

  package main;

  use Venus 'merge_keep_mutate';

  $result = [1, 2];

  my $merge_keep_mutate = merge_keep_mutate $result, [3, 4];

  # [1, 2, 3, 4]

  $result;

  # [1, 2, 3, 4]

=back

=over 4

=item merge_keep_mutate example 7

  # given: synopsis

  package main;

  use Venus 'merge_keep_mutate';

  $result = {a => 1};

  my $merge_keep_mutate = merge_keep_mutate $result, {a => 2, b => 3};

  # {a => 1, b => 3}

  $result;

  # {a => 1, b => 3}

=back

=cut

=head2 merge_swap

  merge_swap(any @args) (any)

The merge_swap function merges two (or more) values and returns a new values
based on the types of the inputs:

B<Note:> This function replaces the existing data, including when merging
hashrefs with hashrefs, and overwrites values (instead of appending) when
merging arrayrefs with arrayrefs.

=over 4

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "hashref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "scalar" we
append the C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "arrayref"
we replace each items in C<lvalue> with the value at the corresponding position
in the C<rvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "hashref" we
append the C<rvalue> to the C<lvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "hashref" we
append the keys and values in C<rvalue> to the C<lvalue>, overwriting existing
keys if there's overlap.

=back

I<Since C<4.15>>

=over 4

=item merge_swap example 1

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap;

  # undef

=back

=over 4

=item merge_swap example 2

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap 1;

  # 1

=back

=over 4

=item merge_swap example 3

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap 1, 2;

  # 2

=back

=over 4

=item merge_swap example 4

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap 1, [2, 3];

  # [2, 3]

=back

=over 4

=item merge_swap example 5

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap [1, 2], 3;

  # [1, 2, 3]

=back

=over 4

=item merge_swap example 6

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap [1, 2, 3], [4, 5];

  # [4, 5, 3]

=back

=over 4

=item merge_swap example 7

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap {a => 1}, {a => 2, b => 3};

  # {a => 2, b => 3}

=back

=over 4

=item merge_swap example 8

  # given: synopsis

  package main;

  use Venus 'merge_swap';

  my $merge_swap = merge_swap(
    {
      a => 1,
      b => {x => 10},
      d => 0,
      g => [4],
    },
    {
      b => {y => 20},
      c => 3,
      e => [5],
      f => [6]
    },
    {
      b => {y => 30, z => 456},
      c => {z => 123},
      d => 2,
      e => [6, 7],
      f => {7, 8},
      g => 5,
    },
  );

  # {
  #   a => 1,
  #   b => {
  #     x => 10,
  #     y => 30,
  #     z => 456
  #   },
  #   c => {z => 123},
  #   d => 2,
  #   e => [6, 7],
  #   f => [6, {7, 8}],
  #   g => [4, 5],
  # }

=back

=cut

=head2 merge_swap_mutate

  merge_swap_mutate(any @args) (any)

The merge_swap_mutate performs a merge operaiton in accordance with
L</merge_swap> except that it mutates the values being merged and returns the
mutated value.

I<Since C<4.15>>

=over 4

=item merge_swap_mutate example 1

  # given: synopsis

  package main;

  use Venus 'merge_swap_mutate';

  $result = undef;

  my $merge_swap_mutate = merge_swap_mutate $result;

  # undef

  $result;

  # undef

=back

=over 4

=item merge_swap_mutate example 2

  # given: synopsis

  package main;

  use Venus 'merge_swap_mutate';

  $result = 1;

  my $merge_swap_mutate = merge_swap_mutate $result;

  # 1

  $result;

  # 1

=back

=over 4

=item merge_swap_mutate example 3

  # given: synopsis

  package main;

  use Venus 'merge_swap_mutate';

  $result = 1;

  my $merge_swap_mutate = merge_swap_mutate $result, 2;

  # 2

  $result;

  # 2

=back

=over 4

=item merge_swap_mutate example 4

  # given: synopsis

  package main;

  use Venus 'merge_swap_mutate';

  $result = 1;

  my $merge_swap_mutate = merge_swap_mutate $result, [2, 3];

  # [2, 3]

  $result;

  # [2, 3]

=back

=over 4

=item merge_swap_mutate example 5

  # given: synopsis

  package main;

  use Venus 'merge_swap_mutate';

  $result = [1, 2];

  my $merge_swap_mutate = merge_swap_mutate $result, 3;

  # [1, 2, 3]

  $result;

  # [1, 2, 3]

=back

=over 4

=item merge_swap_mutate example 6

  # given: synopsis

  package main;

  use Venus 'merge_swap_mutate';

  $result = [1, 2, 3];

  my $merge_swap_mutate = merge_swap_mutate $result, [4, 5];

  # [4, 5, 3]

  $result;

  # [4, 5, 3]

=back

=over 4

=item merge_swap_mutate example 7

  # given: synopsis

  package main;

  use Venus 'merge_swap_mutate';

  $result = {a => 1};

  my $merge_swap_mutate = merge_swap_mutate $result, {a => 2, b => 3};

  # {a => 2, b => 3}

  $result;

  # {a => 2, b => 3}

=back

=cut

=head2 merge_take

  merge_take(any @args) (any)

The merge_take function merges two (or more) values and returns a new values
based on the types of the inputs:

B<Note:> This function always "takes" the new value, does not append arrayrefs,
and overwrites keys and values when merging hashrefs with hashrefs.

=over 4

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "scalar" and the C<rvalue> is a "hashref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "arrayref"
we keep the C<rvalue>.

=item * When the C<lvalue> is a "arrayref" and the C<rvalue> is a "hashref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "scalar" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "arrayref" we
keep the C<rvalue>.

=item * When the C<lvalue> is a "hashref" and the C<rvalue> is a "hashref" we
append the keys and values in C<rvalue> to the C<lvalue>, overwriting existing
keys if there's overlap.

=back

I<Since C<4.15>>

=over 4

=item merge_take example 1

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take;

  # undef

=back

=over 4

=item merge_take example 2

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take 1;

  # 1

=back

=over 4

=item merge_take example 3

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take 1, 2;

  # 2

=back

=over 4

=item merge_take example 4

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take [1], [2, 3];

  # [2, 3]

=back

=over 4

=item merge_take example 5

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take {a => 1, b => {x => 10}}, {b => {y => 20}, c => 3};

  # {a => 1, b => {x => 10, y => 20}, c => 3}

=back

=over 4

=item merge_take example 6

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take [1, 2], 3;

  # 3

=back

=over 4

=item merge_take example 7

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take {a => 1}, 2;

  # 2

=back

=over 4

=item merge_take example 8

  # given: synopsis

  package main;

  use Venus 'merge_take';

  my $merge_take = merge_take(
    {
      a => 1,
      b => {x => 10},
      d => 0,
      g => [4],
    },
    {
      b => {y => 20},
      c => 3,
      e => [5],
      f => [6]
    },
    {
      b => {y => 30, z => 456},
      c => {z => 123},
      d => 2,
      e => [6, 7],
      f => {7, 8},
      g => 5,
    },
  );

  # {
  #   a => 1,
  #   b => {
  #     x => 10,
  #     y => 30,
  #     z => 456
  #   },
  #   c => {z => 123},
  #   d => 2,
  #   e => [6, 7],
  #   f => {7, 8},
  #   g => 5,
  # }

=back

=cut

=head2 merge_take_mutate

  merge_take_mutate(any @args) (any)

The merge_take_mutate performs a merge operaiton in accordance with
L</merge_take> except that it mutates the values being merged and returns the
mutated value.

I<Since C<4.15>>

=over 4

=item merge_take_mutate example 1

  # given: synopsis

  package main;

  use Venus 'merge_take_mutate';

  $result = undef;

  my $merge_take_mutate = merge_take_mutate $result;

  # undef

  $result;

  # undef

=back

=over 4

=item merge_take_mutate example 2

  # given: synopsis

  package main;

  use Venus 'merge_take_mutate';

  $result = 1;

  my $merge_take_mutate = merge_take_mutate $result;

  # 1

  $result;

  # 1

=back

=over 4

=item merge_take_mutate example 3

  # given: synopsis

  package main;

  use Venus 'merge_take_mutate';

  $result = 1;

  my $merge_take_mutate = merge_take_mutate $result, 2;

  # 2

  $result;

  # 2

=back

=over 4

=item merge_take_mutate example 4

  # given: synopsis

  package main;

  use Venus 'merge_take_mutate';

  $result = [1];

  my $merge_take_mutate = merge_take_mutate $result, [2, 3];

  # [2, 3]

  $result;

  # [2, 3]

=back

=over 4

=item merge_take_mutate example 5

  # given: synopsis

  package main;

  use Venus 'merge_take_mutate';

  $result = {a => 1, b => {x => 10}};

  my $merge_take_mutate = merge_take_mutate $result, {b => {y => 20}, c => 3};

  # {a => 1, b => {x => 10, y => 20}, c => 3}

  $result;

  # {a => 1, b => {x => 10, y => 20}, c => 3}

=back

=over 4

=item merge_take_mutate example 6

  # given: synopsis

  package main;

  use Venus 'merge_take_mutate';

  $result = [1, 2];

  my $merge_take_mutate = merge_take_mutate $result, 3;

  # 3

  $result;

  # 3

=back

=over 4

=item merge_take_mutate example 7

  # given: synopsis

  package main;

  use Venus 'merge_take_mutate';

  $result = {a => 1};

  my $merge_take_mutate = merge_take_mutate $result, 2;

  # 2

  $result;

  # 2

=back

=cut

=head2 meta

  meta(string $value, string | coderef $code, any @args) (any)

The meta function builds and returns a L<Venus::Meta> object, or dispatches to
the coderef or method provided.

I<Since C<2.55>>

=over 4

=item meta example 1

  package main;

  use Venus 'meta';

  my $meta = meta 'Venus';

  # bless({...}, 'Venus::Meta')

=back

=over 4

=item meta example 2

  package main;

  use Venus 'meta';

  my $result = meta 'Venus', 'sub', 'meta';

  # 1

=back

=cut

=head2 name

  name(string $value, string | coderef $code, any @args) (any)

The name function builds and returns a L<Venus::Name> object, or dispatches to
the coderef or method provided.

I<Since C<2.55>>

=over 4

=item name example 1

  package main;

  use Venus 'name';

  my $name = name 'Foo/Bar';

  # bless({...}, 'Venus::Name')

=back

=over 4

=item name example 2

  package main;

  use Venus 'name';

  my $name = name 'Foo/Bar', 'package';

  # "Foo::Bar"

=back

=cut

=head2 number

  number(Num $value, string | coderef $code, any @args) (any)

The number function builds and returns a L<Venus::Number> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item number example 1

  package main;

  use Venus 'number';

  my $number = number 1_000;

  # bless({...}, 'Venus::Number')

=back

=over 4

=item number example 2

  package main;

  use Venus 'number';

  my $number = number 1_000, 'prepend', 1;

  # 11_000

=back

=cut

=head2 opts

  opts(arrayref $value, string | coderef $code, any @args) (any)

The opts function builds and returns a L<Venus::Opts> object, or dispatches to
the coderef or method provided.

I<Since C<2.55>>

=over 4

=item opts example 1

  package main;

  use Venus 'opts';

  my $opts = opts ['--resource', 'users'];

  # bless({...}, 'Venus::Opts')

=back

=over 4

=item opts example 2

  package main;

  use Venus 'opts';

  my $opts = opts ['--resource', 'users'], 'reparse', ['resource|r=s', 'help|h'];

  # bless({...}, 'Venus::Opts')

  # my $resource = $opts->get('resource');

  # "users"

=back

=cut

=head2 pairs

  pairs(any $data) (arrayref)

The pairs function accepts an arrayref or hashref and returns an arrayref of
arrayrefs holding keys (or indices) and values. The function returns an empty
arrayref for all other values provided. Returns a list in list context.

I<Since C<3.04>>

=over 4

=item pairs example 1

  package main;

  use Venus 'pairs';

  my $pairs = pairs [1..4];

  # [[0,1], [1,2], [2,3], [3,4]]

=back

=over 4

=item pairs example 2

  package main;

  use Venus 'pairs';

  my $pairs = pairs {'a' => 1, 'b' => 2, 'c' => 3, 'd' => 4};

  # [['a',1], ['b',2], ['c',3], ['d',4]]

=back

=over 4

=item pairs example 3

  package main;

  use Venus 'pairs';

  my @pairs = pairs [1..4];

  # ([0,1], [1,2], [2,3], [3,4])

=back

=over 4

=item pairs example 4

  package main;

  use Venus 'pairs';

  my @pairs = pairs {'a' => 1, 'b' => 2, 'c' => 3, 'd' => 4};

  # (['a',1], ['b',2], ['c',3], ['d',4])

=back

=cut

=head2 path

  path(string $value, string | coderef $code, any @args) (any)

The path function builds and returns a L<Venus::Path> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item path example 1

  package main;

  use Venus 'path';

  my $path = path 't/data/planets';

  # bless({...}, 'Venus::Path')

=back

=over 4

=item path example 2

  package main;

  use Venus 'path';

  my $path = path 't/data/planets', 'absolute';

  # bless({...}, 'Venus::Path')

=back

=cut

=head2 perl

  perl(string $call, any $data) (any)

The perl function builds a L<Venus::Dump> object and will either
L<Venus::Dump/decode> or L<Venus::Dump/encode> based on the argument provided
and returns the result.

I<Since C<2.40>>

=over 4

=item perl example 1

  package main;

  use Venus 'perl';

  my $decode = perl 'decode', '{stable=>bless({},\'Venus::True\')}';

  # { stable => 1 }

=back

=over 4

=item perl example 2

  package main;

  use Venus 'perl';

  my $encode = perl 'encode', { stable => true };

  # '{stable=>bless({},\'Venus::True\')}'

=back

=over 4

=item perl example 3

  package main;

  use Venus 'perl';

  my $perl = perl;

  # bless({...}, 'Venus::Dump')

=back

=over 4

=item perl example 4

  package main;

  use Venus 'perl';

  my $perl = perl 'class', {data => "..."};

  # Exception! (isa Venus::Fault)

=back

=cut

=head2 process

  process(string | coderef $code, any @args) (any)

The process function builds and returns a L<Venus::Process> object, or
dispatches to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item process example 1

  package main;

  use Venus 'process';

  my $process = process;

  # bless({...}, 'Venus::Process')

=back

=over 4

=item process example 2

  package main;

  use Venus 'process';

  my $process = process 'do', 'alarm', 10;

  # bless({...}, 'Venus::Process')

=back

=cut

=head2 proto

  proto(hashref $value, string | coderef $code, any @args) (any)

The proto function builds and returns a L<Venus::Prototype> object, or
dispatches to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item proto example 1

  package main;

  use Venus 'proto';

  my $proto = proto {
    '$counter' => 0,
  };

  # bless({...}, 'Venus::Prototype')

=back

=over 4

=item proto example 2

  package main;

  use Venus 'proto';

  my $proto = proto { '$counter' => 0 }, 'apply', {
    '&decrement' => sub { $_[0]->counter($_[0]->counter - 1) },
    '&increment' => sub { $_[0]->counter($_[0]->counter + 1) },
  };

  # bless({...}, 'Venus::Prototype')

=back

=cut

=head2 puts

  puts(any @args) (arrayref)

The puts function select values from within the underlying data structure using
L<Venus::Array/path> or L<Venus::Hash/path>, optionally assigning the value to
the preceeding scalar reference and returns all the values selected.

I<Since C<3.20>>

=over 4

=item puts example 1

  package main;

  use Venus 'puts';

  my $data = {
    size => "small",
    fruit => "apple",
    meta => {
      expiry => '5d',
    },
    color => "red",
  };

  puts $data, (
    \my $fruit, 'fruit',
    \my $expiry, 'meta.expiry'
  );

  my $puts = [$fruit, $expiry];

  # ["apple", "5d"]

=back

=cut

=head2 raise

  raise(string $class | tuple[string, string] $class, maybe[hashref] $args) (Venus::Error)

The raise function generates and throws a named exception object derived from
L<Venus::Error>, or provided base class, using the exception object arguments
provided.

I<Since C<0.01>>

=over 4

=item raise example 1

  package main;

  use Venus 'raise';

  my $error = raise 'MyApp::Error';

  # bless({...}, 'MyApp::Error')

=back

=over 4

=item raise example 2

  package main;

  use Venus 'raise';

  my $error = raise ['MyApp::Error', 'Venus::Error'];

  # bless({...}, 'MyApp::Error')

=back

=over 4

=item raise example 3

  package main;

  use Venus 'raise';

  my $error = raise ['MyApp::Error', 'Venus::Error'], {
    message => 'Something failed!',
  };

  # bless({message => 'Something failed!', ...}, 'MyApp::Error')

=back

=cut

=head2 random

  random(string | coderef $code, any @args) (any)

The random function builds and returns a L<Venus::Random> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item random example 1

  package main;

  use Venus 'random';

  my $random = random;

  # bless({...}, 'Venus::Random')

=back

=over 4

=item random example 2

  package main;

  use Venus 'random';

  my $random = random 'collect', 10, 'letter';

  # "ryKUPbJHYT"

=back

=cut

=head2 range

  range(number | string @args) (arrayref)

The range function returns the result of a L<Venus::Array/range> operation.

I<Since C<3.20>>

=over 4

=item range example 1

  package main;

  use Venus 'range';

  my $range = range [1..9], ':4';

  # [1..5]

=back

=over 4

=item range example 2

  package main;

  use Venus 'range';

  my $range = range [1..9], '-4:-1';

  # [6..9]

=back

=cut

=head2 read_env

  read_env(string $data) (Venus::Config)

The read_env function returns a new L<Venus::Config> object based on the string
of key/value pairs provided.

I<Since C<4.15>>

=over 4

=item read_env example 1

  package main;

  use Venus 'read_env';

  my $read_env = read_env "APPNAME=Example\nAPPVER=0.01\n# Comment\n\n\nAPPTAG=\"Godzilla\"";

  # bless(..., 'Venus::Config')

=back

=cut

=head2 read_env_file

  read_env_file(string $file) (Venus::Config)

The read_env_file function uses L<Venus::Path> to return a new L<Venus::Config>
object based on the file provided.

I<Since C<4.15>>

=over 4

=item read_env_file example 1

  package main;

  use Venus 'read_env_file';

  my $config = read_env_file 't/conf/read.env';

  # bless(..., 'Venus::Config')

=back

=cut

=head2 read_json

  read_json(string $data) (Venus::Config)

The read_json function returns a new L<Venus::Config> object based on the JSON
string provided.

I<Since C<4.15>>

=over 4

=item read_json example 1

  package main;

  use Venus 'read_json';

  my $config = read_json q(
  {
    "$metadata": {
      "tmplog": "/tmp/log"
    },
    "$services": {
      "log": { "package": "Venus/Path", "argument": { "$metadata": "tmplog" } }
    }
  }
  );

  # bless(..., 'Venus::Config')

=back

=cut

=head2 read_json_file

  read_json_file(string $file) (Venus::Config)

The read_json_file function uses L<Venus::Path> to return a new
L<Venus::Config> object based on the file provided.

I<Since C<4.15>>

=over 4

=item read_json_file example 1

  package main;

  use Venus 'read_json_file';

  my $config = read_json_file 't/conf/read.json';

  # bless(..., 'Venus::Config')

=back

=cut

=head2 read_perl

  read_perl(string $data) (Venus::Config)

The read_perl function returns a new L<Venus::Config> object based on the Perl
string provided.

I<Since C<4.15>>

=over 4

=item read_perl example 1

  package main;

  use Venus 'read_perl';

  my $config = read_perl q(
  {
    '$metadata' => {
      tmplog => "/tmp/log"
    },
    '$services' => {
      log => { package => "Venus/Path", argument => { '$metadata' => "tmplog" } }
    }
  }
  );

  # bless(..., 'Venus::Config')

=back

=cut

=head2 read_perl_file

  read_perl_file(string $file) (Venus::Config)

The read_perl_file function uses L<Venus::Path> to return a new
L<Venus::Config> object based on the file provided.

I<Since C<4.15>>

=over 4

=item read_perl_file example 1

  package main;

  use Venus 'read_perl_file';

  my $config = read_perl_file 't/conf/read.perl';

  # bless(..., 'Venus::Config')

=back

=cut

=head2 read_yaml

  read_yaml(string $data) (Venus::Config)

The read_yaml function returns a new L<Venus::Config> object based on the YAML
string provided.

I<Since C<4.15>>

=over 4

=item read_yaml example 1

  package main;

  use Venus 'read_yaml';

  my $config = read_yaml q(
  '$metadata':
    tmplog: /tmp/log
  '$services':
    log:
      package: "Venus/Path"
      argument:
        '$metadata': tmplog
  );

  # bless(..., 'Venus::Config')

=back

=cut

=head2 read_yaml_file

  read_yaml_file(string $file) (Venus::Config)

The read_yaml_file function uses L<Venus::Path> to return a new
L<Venus::Config> object based on the YAML string provided.

I<Since C<4.15>>

=over 4

=item read_yaml_file example 1

  package main;

  use Venus 'read_yaml_file';

  my $config = read_yaml_file 't/conf/read.yaml';

  # bless(..., 'Venus::Config')

=back

=cut

=head2 regexp

  regexp(string $value, string | coderef $code, any @args) (any)

The regexp function builds and returns a L<Venus::Regexp> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item regexp example 1

  package main;

  use Venus 'regexp';

  my $regexp = regexp '[0-9]';

  # bless({...}, 'Venus::Regexp')

=back

=over 4

=item regexp example 2

  package main;

  use Venus 'regexp';

  my $replace = regexp '[0-9]', 'replace', 'ID 12345', '0', 'g';

  # bless({...}, 'Venus::Replace')

  # $replace->get;

  # "ID 00000"

=back

=cut

=head2 render

  render(string $data, hashref $args) (string)

The render function accepts a string as a template and renders it using
L<Venus::Template>, and returns the result.

I<Since C<3.04>>

=over 4

=item render example 1

  package main;

  use Venus 'render';

  my $render = render 'hello {{name}}', {
    name => 'user',
  };

  # "hello user"

=back

=cut

=head2 replace

  replace(arrayref $value, string | coderef $code, any @args) (any)

The replace function builds and returns a L<Venus::Replace> object, or
dispatches to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item replace example 1

  package main;

  use Venus 'replace';

  my $replace = replace ['hello world', 'world', 'universe'];

  # bless({...}, 'Venus::Replace')

=back

=over 4

=item replace example 2

  package main;

  use Venus 'replace';

  my $replace = replace ['hello world', 'world', 'universe'], 'get';

  # "hello universe"

=back

=cut

=head2 roll

  roll(string $name, any @args) (any)

The roll function takes a list of arguments, assuming the first argument is
invokable, and reorders the list such that the routine name provided comes
after the invocant (i.e. the 1st argument), creating a list acceptable to the
L</call> function.

I<Since C<2.32>>

=over 4

=item roll example 1

  package main;

  use Venus 'roll';

  my @list = roll('sha1_hex', 'Digest::SHA');

  # ('Digest::SHA', 'sha1_hex');

=back

=over 4

=item roll example 2

  package main;

  use Venus 'roll';

  my @list = roll('sha1_hex', call(\'Digest::SHA', 'new'));

  # (bless(do{\(my $o = '...')}, 'Digest::SHA'), 'sha1_hex');

=back

=cut

=head2 schema

  schema(string | coderef $code, any @args) (Venus::Schema)

The schema function builds and returns a L<Venus::Schema> object, or dispatches
to the coderef or method provided.

I<Since C<4.15>>

=over 4

=item schema example 1

  package main;

  use Venus 'schema';

  my $schema = schema;

  # bless({...}, "Venus::Schema")

=back

=over 4

=item schema example 2

  package main;

  use Venus 'schema';

  my $schema = schema 'rule', {
    selector => 'handles',
    presence => 'required',
    executes => [['type', 'arrayref']],
  };

  # bless({...}, "Venus::Schema")

=back

=over 4

=item schema example 3

  package main;

  use Venus 'schema';

  my $schema = schema 'rules', {
    selector => 'fname',
    presence => 'required',
    executes => ['string', 'trim', 'strip'],
  },{
    selector => 'lname',
    presence => 'required',
    executes => ['string', 'trim', 'strip'],
  };

  # bless({...}, "Venus::Schema")

=back

=cut

=head2 search

  search(arrayref $value, string | coderef $code, any @args) (any)

The search function builds and returns a L<Venus::Search> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item search example 1

  package main;

  use Venus 'search';

  my $search = search ['hello world', 'world'];

  # bless({...}, 'Venus::Search')

=back

=over 4

=item search example 2

  package main;

  use Venus 'search';

  my $search = search ['hello world', 'world'], 'count';

  # 1

=back

=cut

=head2 set

  set(arrayref $value) (Venus::Set)

The set function returns a L<Venus::Set> object for the arrayref provided.

I<Since C<4.11>>

=over 4

=item set example 1

  package main;

  use Venus;

  my $set = Venus::set [1..9];

  # bless(..., 'Venus::Set')

=back

=over 4

=item set example 2

  package main;

  use Venus;

  my $set = Venus::set [1..9], 'count';

  # 9

=back

=cut

=head2 sets

  sets(string @args) (arrayref)

The sets function find values from within the underlying data structure using
L<Venus::Array/path> or L<Venus::Hash/path>, where each argument pair is a
selector and value, and returns all the values provided. Returns a list in list
context. Note, nested data structures can be updated but not created.

I<Since C<4.15>>

=over 4

=item sets example 1

  package main;

  use Venus 'sets';

  my $data = ['foo', {'bar' => 'baz'}, 'bar', ['baz']];

  my $sets = sets $data, '3' => 'bar', '1.bar' => 'bar';

  # ['bar', 'bar']

=back

=over 4

=item sets example 2

  package main;

  use Venus 'sets';

  my $data = ['foo', {'bar' => 'baz'}, 'bar', ['baz']];

  my ($baz, $one_bar) = sets $data, '3' => 'bar', '1.bar' => 'bar';

  # ('bar', 'bar')

=back

=over 4

=item sets example 3

  package main;

  use Venus 'sets';

  my $data = {'foo' => {'bar' => 'baz'}, 'bar' => ['baz']};

  my $sets = sets $data, 'bar' => 'bar', 'foo.bar' => 'bar';

  # ['bar', 'bar']

=back

=over 4

=item sets example 4

  package main;

  use Venus 'sets';

  my $data = {'foo' => {'bar' => 'baz'}, 'bar' => ['baz']};

  my ($bar, $foo_bar) = sets $data, 'bar' => 'bar', 'foo.bar' => 'bar';

  # ('bar', 'bar')

=back

=cut

=head2 sorts

  sorts(any @args) (any)

The sorts function accepts a list of values, flattens any arrayrefs, and sorts
it using the default C<sort(LIST)> call style exclusively.

I<Since C<4.15>>

=over 4

=item sorts example 1

  package main;

  use Venus 'sorts';

  my @sorts = sorts 1..4;

  # (1..4)

=back

=over 4

=item sorts example 2

  package main;

  use Venus 'sorts';

  my @sorts = sorts 4,3,2,1;

  # (1..4)

=back

=over 4

=item sorts example 3

  package main;

  use Venus 'sorts';

  my @sorts = sorts [1..4], 5, [6..9];

  # (1..9)

=back

=cut

=head2 space

  space(any $name) (Venus::Space)

The space function returns a L<Venus::Space> object for the package provided.

I<Since C<2.32>>

=over 4

=item space example 1

  package main;

  use Venus 'space';

  my $space = space 'Venus::Scalar';

  # bless({value => 'Venus::Scalar'}, 'Venus::Space')

=back

=cut

=head2 string

  string(string $value, string | coderef $code, any @args) (any)

The string function builds and returns a L<Venus::String> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item string example 1

  package main;

  use Venus 'string';

  my $string = string 'hello world';

  # bless({...}, 'Venus::String')

=back

=over 4

=item string example 2

  package main;

  use Venus 'string';

  my $string = string 'hello world', 'camelcase';

  # "helloWorld"

=back

=cut

=head2 syscall

  syscall(number | string @args) (any)

The syscall function perlforms system call, i.e. a L<perlfunc/qx> operation,
and returns C<true> if the command succeeds, otherwise returns C<false>. In
list context, returns the output of the operation and the exit code.

I<Since C<3.04>>

=over 4

=item syscall example 1

  package main;

  use Venus 'syscall';

  my $syscall = syscall 'perl', '-v';

  # true

=back

=over 4

=item syscall example 2

  package main;

  use Venus 'syscall';

  my $syscall = syscall 'perl', '-z';

  # false

=back

=over 4

=item syscall example 3

  package main;

  use Venus 'syscall';

  my ($data, $code) = syscall 'sun', '--heat-death';

  # ('done', 0)

=back

=over 4

=item syscall example 4

  package main;

  use Venus 'syscall';

  my ($data, $code) = syscall 'earth', '--melt-icecaps';

  # ('', 127)

=back

=cut

=head2 template

  template(string $value, string | coderef $code, any @args) (any)

The template function builds and returns a L<Venus::Template> object, or
dispatches to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item template example 1

  package main;

  use Venus 'template';

  my $template = template 'Hi {{name}}';

  # bless({...}, 'Venus::Template')

=back

=over 4

=item template example 2

  package main;

  use Venus 'template';

  my $template = template 'Hi {{name}}', 'render', undef, {
    name => 'stranger',
  };

  # "Hi stranger"

=back

=cut

=head2 test

  test(string $value, string | coderef $code, any @args) (any)

The test function builds and returns a L<Venus::Test> object, or dispatches to
the coderef or method provided.

I<Since C<2.55>>

=over 4

=item test example 1

  package main;

  use Venus 'test';

  my $test = test 't/Venus.t';

  # bless({...}, 'Venus::Test')

=back

=over 4

=item test example 2

  package main;

  use Venus 'test';

  my $test = test 't/Venus.t', 'for', 'synopsis';

  # bless({...}, 'Venus::Test')

=back

=cut

=head2 text

  text(any @args) (any)

The text function builds a L<Venus::Data> object using L<Venus::Data/text> for
the current file, i.e. L<perlfunc/__FILE__> or script, i.e. C<$0>, and returns
the result of a L<Venus::Data/string> operation using the arguments provided.

I<Since C<3.30>>

=over 4

=item text example 1

  package main;

  use Venus 'text';

  # @@ name
  #
  # Example Name
  #
  # @@ end
  #
  # @@ titles #1
  #
  # Example Title #1
  #
  # @@ end
  #
  # @@ titles #2
  #
  # Example Title #2
  #
  # @@ end

  my $text = text 'name';

  # "Example Name"

=back

=over 4

=item text example 2

  package main;

  use Venus 'text';

  # @@ name
  #
  # Example Name
  #
  # @@ end
  #
  # @@ titles #1
  #
  # Example Title #1
  #
  # @@ end
  #
  # @@ titles #2
  #
  # Example Title #2
  #
  # @@ end

  my $text = text 'titles', '#1';

  # "Example Title #1"

=back

=over 4

=item text example 3

  package main;

  use Venus 'text';

  # @@ name
  #
  # Example Name
  #
  # @@ end
  #
  # @@ titles #1
  #
  # Example Title #1
  #
  # @@ end
  #
  # @@ titles #2
  #
  # Example Title #2
  #
  # @@ end

  my $text = text undef, 'name';

  # "Example Name"

=back

=cut

=head2 then

  then(string | object | coderef $self, any @args) (any)

The then function proxies the call request to the L</call> function and returns
the result as a list, prepended with the invocant.

I<Since C<2.32>>

=over 4

=item then example 1

  package main;

  use Venus 'then';

  my @list = then('Digest::SHA', 'sha1_hex');

  # ("Digest::SHA", "da39a3ee5e6b4b0d3255bfef95601890afd80709")

=back

=cut

=head2 throw

  throw(string | hashref $value, string | coderef $code, any @args) (any)

The throw function builds and returns a L<Venus::Throw> object, or dispatches
to the coderef or method provided.

I<Since C<2.55>>

=over 4

=item throw example 1

  package main;

  use Venus 'throw';

  my $throw = throw 'Example::Error';

  # bless({...}, 'Venus::Throw')

=back

=over 4

=item throw example 2

  package main;

  use Venus 'throw';

  my $throw = throw 'Example::Error', 'error';

  # bless({...}, 'Example::Error')

=back

=over 4

=item throw example 3

  package main;

  use Venus 'throw';

  my $throw = throw {
    name => 'on.execute',
    package => 'Example::Error',
    capture => ['...'],
    stash => {
      time => time,
    },
  };

  # bless({...}, 'Venus::Throw')

=back

=cut

=head2 true

  true() (boolean)

The true function returns a truthy boolean value which is designed to be
practically indistinguishable from the conventional numerical C<1> value.

I<Since C<0.01>>

=over 4

=item true example 1

  package main;

  use Venus;

  my $true = true;

  # 1

=back

=over 4

=item true example 2

  package main;

  use Venus;

  my $false = !true;

  # 0

=back

=cut

=head2 try

  try(any $data, string | coderef $code, any @args) (any)

The try function builds and returns a L<Venus::Try> object, or dispatches to
the coderef or method provided.

I<Since C<2.55>>

=over 4

=item try example 1

  package main;

  use Venus 'try';

  my $try = try sub {};

  # bless({...}, 'Venus::Try')

  # my $result = $try->result;

  # ()

=back

=over 4

=item try example 2

  package main;

  use Venus 'try';

  my $try = try sub { die };

  # bless({...}, 'Venus::Try')

  # my $result = $try->result;

  # Exception! (isa Venus::Error)

=back

=over 4

=item try example 3

  package main;

  use Venus 'try';

  my $try = try sub { die }, 'maybe';

  # bless({...}, 'Venus::Try')

  # my $result = $try->result;

  # undef

=back

=cut

=head2 tv

  tv(any $lvalue, any $rvalue) (boolean)

The tv function compares the lvalue and rvalue and returns true if they have
the same type and value, otherwise returns false. b<Note:> Comparison of
coderefs, filehandles, and blessed objects with private state are impossible.
This function will only return true if these data types are L<"identical"|/is>.
It's also impossible to know which blessed objects have private state and
therefore could produce false-positives when comparing object in those cases.

I<Since C<4.15>>

=over 4

=item tv example 1

  # given: synopsis

  package main;

  use Venus 'tv';

  my $tv = tv 1, 1;

  # true

=back

=over 4

=item tv example 2

  # given: synopsis

  package main;

  use Venus 'tv';

  my $tv = tv '1', 1;

  # false

=back

=over 4

=item tv example 3

  # given: synopsis

  package main;

  use Venus 'tv';

  my $tv = tv ['0', 1..4], ['0', 1..4];

  # true

=back

=over 4

=item tv example 4

  # given: synopsis

  package main;

  use Venus 'tv';

  my $tv = tv ['0', 1..4], [0, 1..4];

  # false

=back

=over 4

=item tv example 5

  # given: synopsis

  package main;

  use Venus 'tv';

  my $tv = tv undef, undef;

  # true

=back

=over 4

=item tv example 6

  # given: synopsis

  package main;

  use Venus 'number', 'tv';

  my $a = number 1;

  my $tv = tv $a, undef;

  # false

=back

=over 4

=item tv example 7

  # given: synopsis

  package main;

  use Venus 'number', 'tv';

  my $a = number 1;

  my $tv = tv $a, $a;

  # true

=back

=over 4

=item tv example 8

  # given: synopsis

  package main;

  use Venus 'number', 'tv';

  my $a = number 1;
  my $b = number 1;

  my $tv = tv $a, $b;

  # true

=back

=over 4

=item tv example 9

  # given: synopsis

  package main;

  use Venus 'number', 'tv';

  my $a = number 0;
  my $b = number 1;

  my $tv = tv $a, $b;

  # false

=back

=cut

=head2 type

  type(string | coderef $code, any @args) (any)

The type function builds and returns a L<Venus::Type> object, or dispatches to
the coderef or method provided.

I<Since C<4.15>>

=over 4

=item type example 1

  package main;

  use Venus 'type';

  my $type = type;

  # bless({...}, 'Venus::Type')

=back

=over 4

=item type example 2

  package main;

  use Venus 'type';

  my $expression = type 'expression', 'string | number';

  # ["either", "string", "number"]

=back

=over 4

=item type example 3

  package main;

  use Venus 'type';

  my $expression = type 'expression', ["either", "string", "number"];

  # "string | number"

=back

=cut

=head2 unpack

  unpack(any @args) (Venus::Unpack)

The unpack function builds and returns a L<Venus::Unpack> object.

I<Since C<2.40>>

=over 4

=item unpack example 1

  package main;

  use Venus 'unpack';

  my $unpack = unpack;

  # bless({...}, 'Venus::Unpack')

  # $unpack->checks('string');

  # false

  # $unpack->checks('undef');

  # false

=back

=over 4

=item unpack example 2

  package main;

  use Venus 'unpack';

  my $unpack = unpack rand;

  # bless({...}, 'Venus::Unpack')

  # $unpack->check('number');

  # false

  # $unpack->check('float');

  # true

=back

=cut

=head2 vars

  vars(hashref $value, string | coderef $code, any @args) (any)

The vars function builds and returns a L<Venus::Vars> object, or dispatches to
the coderef or method provided.

I<Since C<2.55>>

=over 4

=item vars example 1

  package main;

  use Venus 'vars';

  my $vars = vars {};

  # bless({...}, 'Venus::Vars')

=back

=over 4

=item vars example 2

  package main;

  use Venus 'vars';

  my $path = vars {}, 'exists', 'path';

  # "..."

=back

=cut

=head2 vns

  vns(string $name, args $args, string | coderef $callback, any @args) (any)

The vns function build a L<Venus> package based on the name provided, loads and
instantiates the package, and returns an instance of that package or dispatches
to the method provided and returns the result.

I<Since C<4.15>>

=over 4

=item vns example 1

  package main;

  use Venus 'vns';

  my $space = vns 'space';

  # bless({value => 'Venus'}, 'Venus::Space')

=back

=over 4

=item vns example 2

  package main;

  use Venus 'vns';

  my $space = vns 'space', 'Venus::String';

  # bless({value => 'Venus::String'}, 'Venus::Space')

=back

=over 4

=item vns example 3

  package main;

  use Venus 'vns';

  my $code = vns 'code', sub{};

  # bless({value => sub{...}}, 'Venus::Code')

=back

=cut

=head2 what

  what(any $data, string | coderef $code, any @args) (any)

The what function builds and returns a L<Venus::What> object, or dispatches to
the coderef or method provided.

I<Since C<4.11>>

=over 4

=item what example 1

  package main;

  use Venus 'what';

  my $what = what [1..4];

  # bless({...}, 'Venus::What')

  # $what->deduce;

  # bless({...}, 'Venus::Array')

=back

=over 4

=item what example 2

  package main;

  use Venus 'what';

  my $what = what [1..4], 'deduce';

  # bless({...}, 'Venus::Array')

=back

=cut

=head2 work

  work(coderef $callback) (Venus::Process)

The work function builds a L<Venus::Process> object, forks the current process
using the callback provided via the L<Venus::Process/work> operation, and
returns an instance of L<Venus::Process> representing the current process.

I<Since C<2.40>>

=over 4

=item work example 1

  package main;

  use Venus 'work';

  my $parent = work sub {
    my ($process) = @_;
    # in forked process ...
    $process->exit;
  };

  # bless({...}, 'Venus::Process')

=back

=cut

=head2 wrap

  wrap(string $data, string $name) (coderef)

The wrap function installs a wrapper function in the calling package which when
called either returns the package string if no arguments are provided, or calls
L</make> on the package with whatever arguments are provided and returns the
result. Unless an alias is provided as a second argument, special characters
are stripped from the package to create the function name.

I<Since C<2.32>>

=over 4

=item wrap example 1

  package main;

  use Venus 'wrap';

  my $coderef = wrap('Digest::SHA');

  # sub { ... }

  # my $digest = DigestSHA();

  # "Digest::SHA"

  # my $digest = DigestSHA(1);

  # bless(do{\(my $o = '...')}, 'Digest::SHA')

=back

=over 4

=item wrap example 2

  package main;

  use Venus 'wrap';

  my $coderef = wrap('Digest::SHA', 'SHA');

  # sub { ... }

  # my $digest = SHA();

  # "Digest::SHA"

  # my $digest = SHA(1);

  # bless(do{\(my $o = '...')}, 'Digest::SHA')

=back

=cut

=head2 write_env

  write_env(hashref $data) (string)

The write_env function returns a string representing environment variable
key/value pairs based on the L</value> held by the underlying L<Venus::Config>
object.

I<Since C<4.15>>

=over 4

=item write_env example 1

  package main;

  use Venus 'write_env';

  my $write_env = write_env {
    APPNAME => "Example",
    APPTAG => "Godzilla",
    APPVER => 0.01,
  };

  # "APPNAME=Example\nAPPTAG=Godzilla\nAPPVER=0.01"

=back

=cut

=head2 write_env_file

  write_env_file(string $path, hashref $data) (Venus::Config)

The write_env_file function saves a environment configuration file and returns
a new L<Venus::Config> object.

I<Since C<4.15>>

=over 4

=item write_env_file example 1

  package main;

  use Venus 'write_env_file';

  my $write_env_file = write_env_file 't/conf/write.env', {
    APPNAME => "Example",
    APPTAG => "Godzilla",
    APPVER => 0.01,
  };

  # bless(..., 'Venus::Config')

=back

=cut

=head2 write_json

  write_json(hashref $data) (string)

The write_json function returns a JSON encoded string based on the L</value>
held by the underlying L<Venus::Config> object.

I<Since C<4.15>>

=over 4

=item write_json example 1

  package main;

  use Venus 'write_json';

  my $write_json = write_json {
    '$services' => {
      log => { package => "Venus::Path" },
    },
  };

  # '{ "$services":{ "log":{ "package":"Venus::Path" } } }'

=back

=cut

=head2 write_json_file

  write_json_file(string $path, hashref $data) (Venus::Config)

The write_json_file function saves a JSON configuration file and returns a new
L<Venus::Config> object.

I<Since C<4.15>>

=over 4

=item write_json_file example 1

  package main;

  use Venus 'write_json_file';

  my $write_json_file = write_json_file 't/conf/write.json', {
    '$services' => {
      log => { package => "Venus/Path", argument => { value => "." } }
    }
  };

  # bless(..., 'Venus::Config')

=back

=cut

=head2 write_perl

  write_perl(hashref $data) (string)

The write_perl function returns a FILE encoded string based on the L</value>
held by the underlying L<Venus::Config> object.

I<Since C<4.15>>

=over 4

=item write_perl example 1

  package main;

  use Venus 'write_perl';

  my $write_perl = write_perl {
    '$services' => {
      log => { package => "Venus::Path" },
    },
  };

  # '{ "\$services" => { log => { package => "Venus::Path" } } }'

=back

=cut

=head2 write_perl_file

  write_perl_file(string $path, hashref $data) (Venus::Config)

The write_perl_file function saves a Perl configuration file and returns a new
L<Venus::Config> object.

I<Since C<4.15>>

=over 4

=item write_perl_file example 1

  package main;

  use Venus 'write_perl_file';

  my $write_perl_file = write_perl_file 't/conf/write.perl', {
    '$services' => {
      log => { package => "Venus/Path", argument => { value => "." } }
    }
  };

  # bless(..., 'Venus::Config')

=back

=cut

=head2 write_yaml

  write_yaml(hashref $data) (string)

The write_yaml function returns a FILE encoded string based on the L</value>
held by the underlying L<Venus::Config> object.

I<Since C<4.15>>

=over 4

=item write_yaml example 1

  package main;

  use Venus 'write_yaml';

  my $write_yaml = write_yaml {
    '$services' => {
      log => { package => "Venus::Path" },
    },
  };

  # '---\n$services:\n\s\slog:\n\s\s\s\spackage:\sVenus::Path'

=back

=cut

=head2 write_yaml_file

  write_yaml_file(string $path, hashref $data) (Venus::Config)

The write_yaml_file function saves a YAML configuration file and returns a new
L<Venus::Config> object.

I<Since C<4.15>>

=over 4

=item write_yaml_file example 1

  package main;

  use Venus 'write_yaml_file';

  my $write_yaml_file = write_yaml_file 't/conf/write.yaml', {
    '$services' => {
      log => { package => "Venus/Path", argument => { value => "." } }
    }
  };

  # bless(..., 'Venus::Config')

=back

=cut

=head2 yaml

  yaml(string $call, any $data) (any)

The yaml function builds a L<Venus::Yaml> object and will either
L<Venus::Yaml/decode> or L<Venus::Yaml/encode> based on the argument provided
and returns the result.

I<Since C<2.40>>

=over 4

=item yaml example 1

  package main;

  use Venus 'yaml';

  my $decode = yaml 'decode', "---\nname:\n- Ready\n- Robot\nstable: true\n";

  # { name => ["Ready", "Robot"], stable => 1 }

=back

=over 4

=item yaml example 2

  package main;

  use Venus 'yaml';

  my $encode = yaml 'encode', { name => ["Ready", "Robot"], stable => true };

  # '---\nname:\n- Ready\n- Robot\nstable: true\n'

=back

=over 4

=item yaml example 3

  package main;

  use Venus 'yaml';

  my $yaml = yaml;

  # bless({...}, 'Venus::Yaml')

=back

=over 4

=item yaml example 4

  package main;

  use Venus 'yaml';

  my $yaml = yaml 'class', {data => "..."};

  # Exception! (isa Venus::Fault)

=back

=cut

=head1 FEATURES

This package provides the following features:

=cut

=over 4

=item venus-args

This library contains a L<Venus::Args> class which provides methods for
accessing C<@ARGS> items.

=back

=over 4

=item venus-array

This library contains a L<Venus::Array> class which provides methods for
manipulating array data.

=back

=over 4

=item venus-assert

This library contains a L<Venus::Assert> class which provides a mechanism for
asserting type constraints and coercion.

=back

=over 4

=item venus-atom

This library contains a L<Venus::Atom> class which provides a write-once object
representing a constant value.

=back

=over 4

=item venus-boolean

This library contains a L<Venus::Boolean> class which provides a representation
for boolean values.

=back

=over 4

=item venus-box

This library contains a L<Venus::Box> class which provides a pure Perl boxing
mechanism.

=back

=over 4

=item venus-check

This library contains a L<Venus::Check> class which provides runtime dynamic type checking.

=back

=over 4

=item venus-class

This library contains a L<Venus::Class> class which provides a class builder.

=back

=over 4

=item venus-cli

This library contains a L<Venus::Cli> class which provides a superclass for
creating CLIs.

=back

=over 4

=item venus-code

This library contains a L<Venus::Code> class which provides methods for
manipulating subroutines.

=back

=over 4

=item venus-coercion

This library contains a L<Venus::Coercion> class which provides data type coercions via L<Venus::Check>.

=back

=over 4

=item venus-config

This library contains a L<Venus::Config> class which provides methods for
loading Perl, YAML, and JSON configuration data.

=back

=over 4

=item venus-constraint

This library contains a L<Venus::Constraint> class which provides data type constraints via L<Venus::Check>.

=back

=over 4

=item venus-data

This library contains a L<Venus::Data> class which provides methods for
extracting C<DATA> sections and POD block.

=back

=over 4

=item venus-date

This library contains a L<Venus::Date> class which provides methods for
formatting, parsing, and manipulating dates.

=back

=over 4

=item venus-dump

This library contains a L<Venus::Dump> class which provides methods for reading
and writing dumped Perl data.

=back

=over 4

=item venus-enum

This library contains a L<Venus::Enum> class which provides an interface for working with enumerations.

=back

=over 4

=item venus-error

This library contains a L<Venus::Error> class which represents a context-aware
error (exception object).

=back

=over 4

=item venus-factory

This library contains a L<Venus::Factory> class which provides an object-oriented factory pattern for building objects.

=back

=over 4

=item venus-false

This library contains a L<Venus::False> class which provides the global
C<false> value.

=back

=over 4

=item venus-fault

This library contains a L<Venus::Fault> class which represents a generic system
error (exception object).

=back

=over 4

=item venus-float

This library contains a L<Venus::Float> class which provides methods for
manipulating float data.

=back

=over 4

=item venus-future

This library contains a L<Venus::Future> class which provides a
framework-agnostic implementation of the Future pattern.

=back

=over 4

=item venus-gather

This library contains a L<Venus::Gather> class which provides an
object-oriented interface for complex pattern matching operations on
collections of data, e.g. array references.

=back

=over 4

=item venus-hash

This library contains a L<Venus::Hash> class which provides methods for
manipulating hash data.

=back

=over 4

=item venus-json

This library contains a L<Venus::Json> class which provides methods for reading
and writing JSON data.

=back

=over 4

=item venus-log

This library contains a L<Venus::Log> class which provides methods for logging
information using various log levels.

=back

=over 4

=item venus-map

This library contains a L<Venus::Map> class which provides a representation of
a collection of ordered key/value pairs.

=back

=over 4

=item venus-match

This library contains a L<Venus::Match> class which provides an object-oriented
interface for complex pattern matching operations on scalar values.

=back

=over 4

=item venus-meta

This library contains a L<Venus::Meta> class which provides configuration
information for L<Venus> derived classes.

=back

=over 4

=item venus-mixin

This library contains a L<Venus::Mixin> class which provides a mixin builder.

=back

=over 4

=item venus-name

This library contains a L<Venus::Name> class which provides methods for parsing
and formatting package namespaces.

=back

=over 4

=item venus-number

This library contains a L<Venus::Number> class which provides methods for
manipulating number data.

=back

=over 4

=item venus-opts

This library contains a L<Venus::Opts> class which provides methods for
handling command-line arguments.

=back

=over 4

=item venus-os

This library contains a L<Venus::Os> class which provides methods for
determining the current operating system, as well as finding and executing
files.

=back

=over 4

=item venus-path

This library contains a L<Venus::Path> class which provides methods for working
with file system paths.

=back

=over 4

=item venus-process

This library contains a L<Venus::Process> class which provides methods for
handling and forking processes.

=back

=over 4

=item venus-prototype

This library contains a L<Venus::Prototype> class which provides a simple
construct for enabling prototype-base programming.

=back

=over 4

=item venus-random

This library contains a L<Venus::Random> class which provides an
object-oriented interface for Perl's pseudo-random number generator.

=back

=over 4

=item venus-range

This library contains a L<Venus::Range> class which provides an object-oriented
interface for selecting elements from an arrayref using range expressions.

=back

=over 4

=item venus-regexp

This library contains a L<Venus::Regexp> class which provides methods for
manipulating regexp data.

=back

=over 4

=item venus-replace

This library contains a L<Venus::Replace> class which provides methods for
manipulating regexp replacement data.

=back

=over 4

=item venus-result

This library contains a L<Venus::Result> class which provides a container for
representing success and error states.

=back

=over 4

=item venus-run

This library contains a L<Venus::Run> class which provides a base class for
providing a command execution system for creating CLIs (command-line
interfaces).

=back

=over 4

=item venus-scalar

This library contains a L<Venus::Scalar> class which provides methods for
manipulating scalar data.

=back

=over 4

=item venus-schema

This library contains a L<Venus::Schema> class which provides a mechanism for
validating complex data structures.

=back

=over 4

=item venus-sealed

This library contains a L<Venus::Sealed> class which provides a mechanism for
restricting access to the underlying data structure.

=back

=over 4

=item venus-search

This library contains a L<Venus::Search> class which provides methods for
manipulating regexp search data.

=back

=over 4

=item venus-set

This library contains a L<Venus::Set> class which provides a representation of
a collection of ordered key/value pairs.

=back

=over 4

=item venus-space

This library contains a L<Venus::Space> class which provides methods for
parsing and manipulating package namespaces.

=back

=over 4

=item venus-string

This library contains a L<Venus::String> class which provides methods for
manipulating string data.

=back

=over 4

=item venus-task

This library contains a L<Venus::Task> class which provides a base class for
creating CLIs (command-line interfaces).

=back

=over 4

=item venus-template

This library contains a L<Venus::Template> class which provides a templating
system, and methods for rendering template.

=back

=over 4

=item venus-test

This library contains a L<Venus::Test> class which aims to provide a standard
for documenting L<Venus> derived software projects.

=back

=over 4

=item venus-throw

This library contains a L<Venus::Throw> class which provides a mechanism for
generating and raising error objects.

=back

=over 4

=item venus-true

This library contains a L<Venus::True> class which provides the global C<true>
value.

=back

=over 4

=item venus-try

This library contains a L<Venus::Try> class which provides an object-oriented
interface for performing complex try/catch operations.

=back

=over 4

=item venus-type

This library contains a L<Venus::Type> class which provides a mechanism for
parsing, generating, and validating data type expressions.

=back

=over 4

=item venus-undef

This library contains a L<Venus::Undef> class which provides methods for
manipulating undef data.

=back

=over 4

=item venus-unpack

This library contains a L<Venus::Unpack> class which provides methods for
validating, coercing, and otherwise operating on lists of arguments.

=back

=over 4

=item venus-validate

This library contains a L<Venus::Validate> class which provides a mechanism for
performing data validation of simple and hierarchal data.

=back

=over 4

=item venus-vars

This library contains a L<Venus::Vars> class which provides methods for
accessing C<%ENV> items.

=back

=over 4

=item venus-what

This library contains a L<Venus::What> class which provides methods for casting
native data types to objects.

=back

=over 4

=item venus-yaml

This library contains a L<Venus::Yaml> class which provides methods for reading
and writing YAML data.

=back

=head1 AUTHORS

Awncorp, C<awncorp@cpan.org>

=cut

=head1 LICENSE

Copyright (C) 2022, Awncorp, C<awncorp@cpan.org>.

This program is free software, you can redistribute it and/or modify it under
the terms of the Apache license version 2.0.

=cut