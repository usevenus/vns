
=encoding UTF8

=cut

=head1 NAME

Venus::Os - OS Class

=cut

=head1 ABSTRACT

OS Class for Perl 5

=cut

=head1 SYNOPSIS

  package main;

  use Venus::Os;

  my $os = Venus::Os->new;

  # bless({...}, 'Venus::Os')

  # my $name = $os->name;

  # "linux"

=cut

=head1 DESCRIPTION

This package provides methods for determining the current operating system, as
well as finding and executing files.

=cut

=head1 INHERITS

This package inherits behaviors from:

L<Venus::Kind::Utility>

=cut

=head1 METHODS

This package provides the following methods:

=cut

=head2 call

  call(string $name, string @args) (any)

The call method attempts to find the path to the program specified via
L</which> and dispatches to L<Venus::Path/mkcall> and returns the result. Any
exception throw is supressed and will return undefined if encountered.

I<Since C<2.80>>

=over 4

=item call example 1

  # given: synopsis

  package main;

  my $app = $os->is_win ? 'perl.exe' : 'perl';

  my $call = $os->call($app, '-V:osname');

  # "osname='linux';"

=back

=over 4

=item call example 2

  # given: synopsis

  package main;

  my $app = $os->is_win ? 'perl.exe' : 'perl';

  my @call = $os->call($app, '-V:osname');

  # ("osname='linux';", 0)

=back

=over 4

=item call example 3

  # given: synopsis

  package main;

  my $call = $os->call('nowhere');

  # undef

=back

=over 4

=item call example 4

  # given: synopsis

  package main;

  my @call = $os->call($^X, '-V:osname');

  # ("osname='linux';", 0)

=back

=over 4

=item call example 5

  # given: synopsis

  package main;

  my @call = $os->call($^X, 't/data/sun');

  # ("", 1)

=back

=cut

=head2 find

  find(string $name, string @paths) (arrayref)

The find method searches the paths provided for a file matching the name
provided and returns all the files found as an arrayref. Returns a list in list
context.

I<Since C<2.80>>

=over 4

=item find example 1

  # given: synopsis

  package main;

  my $find = $os->find('cmd', 't/path/user/bin');

  # ["t/path/user/bin/cmd"]

=back

=over 4

=item find example 2

  # given: synopsis

  package main;

  my $find = $os->find('cmd', 't/path/user/bin', 't/path/usr/bin');

  # ["t/path/user/bin/cmd", "t/path/usr/bin/cmd"]

=back

=over 4

=item find example 3

  # given: synopsis

  package main;

  my $find = $os->find('zzz', 't/path/user/bin', 't/path/usr/bin');

  # []

=back

=cut

=head2 is_bsd

  is_bsd() (boolean)

The is_bsd method returns true if the OS is either C<"freebsd"> or
C<"openbsd">, and otherwise returns false.

I<Since C<2.80>>

=over 4

=item is_bsd example 1

  # given: synopsis

  package main;

  # on linux

  my $is_bsd = $os->is_bsd;

  # false

=back

=over 4

=item is_bsd example 2

  # given: synopsis

  package main;

  # on freebsd

  my $is_bsd = $os->is_bsd;

  # true

=back

=over 4

=item is_bsd example 3

  # given: synopsis

  package main;

  # on openbsd

  my $is_bsd = $os->is_bsd;

  # true

=back

=cut

=head2 is_cyg

  is_cyg() (boolean)

The is_cyg method returns true if the OS is either C<"cygwin"> or C<"msys">,
and otherwise returns false.

I<Since C<2.80>>

=over 4

=item is_cyg example 1

  # given: synopsis

  package main;

  # on linux

  my $is_cyg = $os->is_cyg;

  # false

=back

=over 4

=item is_cyg example 2

  # given: synopsis

  package main;

  # on cygwin

  my $is_cyg = $os->is_cyg;

  # true

=back

=over 4

=item is_cyg example 3

  # given: synopsis

  package main;

  # on msys

  my $is_cyg = $os->is_cyg;

  # true

=back

=cut

=head2 is_dos

  is_dos() (boolean)

The is_dos method returns true if the OS is either C<"mswin32"> or C<"dos"> or
C<"os2">, and otherwise returns false.

I<Since C<2.80>>

=over 4

=item is_dos example 1

  # given: synopsis

  package main;

  # on linux

  my $is_dos = $os->is_dos;

  # false

=back

=over 4

=item is_dos example 2

  # given: synopsis

  package main;

  # on mswin32

  my $is_dos = $os->is_dos;

  # true

=back

=over 4

=item is_dos example 3

  # given: synopsis

  package main;

  # on dos

  my $is_dos = $os->is_dos;

  # true

=back

=over 4

=item is_dos example 4

  # given: synopsis

  package main;

  # on os2

  my $is_dos = $os->is_dos;

  # true

=back

=cut

=head2 is_lin

  is_lin() (boolean)

The is_lin method returns true if the OS is C<"linux">, and otherwise returns
false.

I<Since C<2.80>>

=over 4

=item is_lin example 1

  # given: synopsis

  package main;

  # on linux

  my $is_lin = $os->is_lin;

  # true

=back

=over 4

=item is_lin example 2

  # given: synopsis

  package main;

  # on macos

  my $is_lin = $os->is_lin;

  # false

=back

=over 4

=item is_lin example 3

  # given: synopsis

  package main;

  # on mswin32

  my $is_lin = $os->is_lin;

  # false

=back

=cut

=head2 is_mac

  is_mac() (boolean)

The is_mac method returns true if the OS is either C<"macos"> or C<"darwin">,
and otherwise returns false.

I<Since C<2.80>>

=over 4

=item is_mac example 1

  # given: synopsis

  package main;

  # on linux

  my $is_mac = $os->is_mac;

  # false

=back

=over 4

=item is_mac example 2

  # given: synopsis

  package main;

  # on macos

  my $is_mac = $os->is_mac;

  # true

=back

=over 4

=item is_mac example 3

  # given: synopsis

  package main;

  # on darwin

  my $is_mac = $os->is_mac;

  # true

=back

=cut

=head2 is_non

  is_non() (boolean)

The is_non method returns true if the OS is not recognized, and if recognized
returns false.

I<Since C<2.80>>

=over 4

=item is_non example 1

  # given: synopsis

  package main;

  # on linux

  my $is_non = $os->is_non;

  # false

=back

=over 4

=item is_non example 2

  # given: synopsis

  package main;

  # on aix

  my $is_non = $os->is_non;

  # true

=back

=cut

=head2 is_sun

  is_sun() (boolean)

The is_sun method returns true if the OS is either C<"solaris"> or C<"sunos">,
and otherwise returns false.

I<Since C<2.80>>

=over 4

=item is_sun example 1

  # given: synopsis

  package main;

  # on linux

  my $is_sun = $os->is_sun;

  # false

=back

=over 4

=item is_sun example 2

  # given: synopsis

  package main;

  # on solaris

  my $is_sun = $os->is_sun;

  # true

=back

=over 4

=item is_sun example 3

  # given: synopsis

  package main;

  # on sunos

  my $is_sun = $os->is_sun;

  # true

=back

=cut

=head2 is_vms

  is_vms() (boolean)

The is_vms method returns true if the OS is C<"vms">, and otherwise returns
false.

I<Since C<2.80>>

=over 4

=item is_vms example 1

  # given: synopsis

  package main;

  # on linux

  my $is_vms = $os->is_vms;

  # false

=back

=over 4

=item is_vms example 2

  # given: synopsis

  package main;

  # on vms

  my $is_vms = $os->is_vms;

  # true

=back

=cut

=head2 is_win

  is_win() (boolean)

The is_win method returns true if the OS is either C<"mswin32"> or C<"dos"> or
C<"os2">, and otherwise returns false.

I<Since C<2.80>>

=over 4

=item is_win example 1

  # given: synopsis

  package main;

  # on linux

  my $is_win = $os->is_win;

  # false

=back

=over 4

=item is_win example 2

  # given: synopsis

  package main;

  # on mswin32

  my $is_win = $os->is_win;

  # true

=back

=over 4

=item is_win example 3

  # given: synopsis

  package main;

  # on dos

  my $is_win = $os->is_win;

  # true

=back

=over 4

=item is_win example 4

  # given: synopsis

  package main;

  # on os2

  my $is_win = $os->is_win;

  # true

=back

=cut

=head2 name

  name() (string)

The name method returns the OS name.

I<Since C<2.80>>

=over 4

=item name example 1

  # given: synopsis

  package main;

  # on linux

  my $name = $os->name;

  # "linux"

  # same as $^O

=back

=cut

=head2 new

  new(any @args) (Venus::Os)

The new method constructs an instance of the package.

I<Since C<4.15>>

=over 4

=item new example 1

  package main;

  use Venus::Os;

  my $new = Venus::Os->new;

  # bless(..., "Venus::Os")

=back

=cut

=head2 paths

  paths() (arrayref)

The paths method returns the paths specified by the C<"PATH"> environment
variable as an arrayref of unique paths. Returns a list in list context.

I<Since C<2.80>>

=over 4

=item paths example 1

  # given: synopsis

  package main;

  my $paths = $os->paths;

  # [
  #   "/root/local/bin",
  #   "/root/bin",
  #   "/usr/local/sbin",
  #   "/usr/local/bin",
  #   "/usr/sbin:/usr/bin",
  # ]

=back

=cut

=head2 quote

  quote(string $data) (string)

The quote method accepts a string and returns the OS-specific quoted version of
the string.

I<Since C<2.91>>

=over 4

=item quote example 1

  # given: synopsis

  package main;

  # on linux

  my $quote = $os->quote("hello \"world\"");

  # "'hello \"world\"'"

=back

=over 4

=item quote example 2

  # given: synopsis

  package main;

  # on linux

  my $quote = $os->quote('hello \'world\'');

  # "'hello '\\''world'\\'''"

=back

=over 4

=item quote example 3

  # given: synopsis

  package main;

  # on mswin32

  my $quote = $os->quote("hello \"world\"");

  # "\"hello \\"world\\"\""

=back

=over 4

=item quote example 4

  # given: synopsis

  package main;

  # on mswin32

  my $quote = $os->quote('hello "world"');

  # '"hello \"world\""'

=back

=cut

=head2 read

  read(any $from) (string)

The read method reads from a file, filehandle, or STDIN, and returns the data.
To read from STDIN provide the string C<"STDIN">. The method defaults to reading from STDIN.

I<Since C<4.15>>

=over 4

=item read example 1

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read;

  # from STDIN

  # "..."

=back

=over 4

=item read example 2

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read('STDIN');

  # from STDIN

  # "..."

=back

=over 4

=item read example 3

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read('t/data/texts/iso-8859-1.txt');

  # from file

  # "Hello, world! This is ISO-8859-1."

=back

=over 4

=item read example 4

  # given: synopsis

  package main;

  # on linux

  open my $fh, '<', 't/data/texts/iso-8859-1.txt';

  my $read = $os->read($fh);

  # from filehandle

  # "Hello, world! This is ISO-8859-1."

=back

=over 4

=item read example 5

  # given: synopsis

  package main;

  # on linux

  use IO::File;

  my $fh = IO::File->new('t/data/texts/iso-8859-1.txt', 'r');

  my $read = $os->read($fh);

  # from filehandle

  # "Hello, world! This is ISO-8859-1."

=back

=over 4

=item read example 6

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read('t/data/texts/utf-16be.txt');

  # from UTF-16BE encoded file

  # "Hello, world! こんにちは世界！"

=back

=over 4

=item read example 7

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read('t/data/texts/utf-16le.txt');

  # from UTF-16LE encoded file

  # "Hello, world! こんにちは世界！"

=back

=over 4

=item read example 8

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read('t/data/texts/utf-32be.txt');

  # from UTF-32BE encoded file

  # "Hello, world! こんにちは世界！"

=back

=over 4

=item read example 9

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read('t/data/texts/utf-32le.txt');

  # from UTF-32LE encoded file

  # "Hello, world! こんにちは世界！"

=back

=over 4

=item read example 10

  # given: synopsis

  package main;

  # on linux

  my $read = $os->read('t/data/texts/utf-8.txt');

  # from UTF-8 encoded file

  # "Hello, world! こんにちは世界！"

=back

=cut

=head2 syscall

  syscall(any @data) (Venus::Os)

The syscall method executes the command and arguments provided, via
L<perlfunc/system>, and returns the invocant.

I<Since C<4.15>>

=over 4

=item syscall example 1

  package main;

  use Venus::Os;

  my $os = Venus::Os->new;

  $os->syscall($^X, '--help');

  # bless(..., "Venus::Os")

=back

=over 4

=item syscall example 2

  package main;

  use Venus::Os;

  my $os = Venus::Os->new;

  $os->syscall('.help');

  # Exception! (isa Venus::Os::Error) (see error_on_system_call)

=back

=cut

=head2 type

  type() (string)

The type method returns a string representing the "test" method, which
identifies the OS, that would return true if called, based on the name of the
OS.

I<Since C<2.80>>

=over 4

=item type example 1

  # given: synopsis

  package main;

  # on linux

  my $type = $os->type;

  # "is_lin"

=back

=over 4

=item type example 2

  # given: synopsis

  package main;

  # on macos

  my $type = $os->type;

  # "is_mac"

=back

=over 4

=item type example 3

  # given: synopsis

  package main;

  # on mswin32

  my $type = $os->type;

  # "is_win"

=back

=over 4

=item type example 4

  # given: synopsis

  package main;

  # on openbsd

  my $type = $os->type;

  # "is_bsd"

=back

=over 4

=item type example 5

  # given: synopsis

  package main;

  # on cygwin

  my $type = $os->type;

  # "is_cyg"

=back

=over 4

=item type example 6

  # given: synopsis

  package main;

  # on dos

  my $type = $os->type;

  # "is_win"

=back

=over 4

=item type example 7

  # given: synopsis

  package main;

  # on solaris

  my $type = $os->type;

  # "is_sun"

=back

=over 4

=item type example 8

  # given: synopsis

  package main;

  # on vms

  my $type = $os->type;

  # "is_vms"

=back

=cut

=head2 where

  where(string $file) (arrayref)

The where method searches the paths defined by the C<PATH> environment variable
for a file matching the name provided and returns all the files found as an
arrayref. Returns a list in list context. This method doesn't check (or care)
if the files found are actually executable.

I<Since C<2.80>>

=over 4

=item where example 1

  # given: synopsis

  package main;

  my $where = $os->where('cmd');

  # [
  #   "t/path/user/local/bin/cmd",
  #   "t/path/user/bin/cmd",
  #   "t/path/usr/bin/cmd",
  #   "t/path/usr/local/bin/cmd",
  #   "t/path/usr/local/sbin/cmd",
  #   "t/path/usr/sbin/cmd"
  # ]

=back

=over 4

=item where example 2

  # given: synopsis

  package main;

  my $where = $os->where('app1');

  # [
  #   "t/path/user/local/bin/app1",
  #   "t/path/usr/bin/app1",
  #   "t/path/usr/sbin/app1"
  # ]

=back

=over 4

=item where example 3

  # given: synopsis

  package main;

  my $where = $os->where('app2');

  # [
  #   "t/path/user/local/bin/app2",
  #   "t/path/usr/bin/app2",
  # ]

=back

=over 4

=item where example 4

  # given: synopsis

  package main;

  my $where = $os->where('app3');

  # [
  #   "t/path/user/bin/app3",
  #   "t/path/usr/sbin/app3"
  # ]

=back

=over 4

=item where example 5

  # given: synopsis

  package main;

  my $where = $os->where('app4');

  # [
  #   "t/path/user/local/bin/app4",
  #   "t/path/usr/local/bin/app4",
  #   "t/path/usr/local/sbin/app4",
  # ]

=back

=over 4

=item where example 6

  # given: synopsis

  package main;

  my $where = $os->where('app5');

  # []

=back

=cut

=head2 which

  which(string $file) (string)

The which method returns the first match from the result of calling the
L</where> method with the arguments provided.

I<Since C<2.80>>

=over 4

=item which example 1

  # given: synopsis

  package main;

  my $which = $os->which('cmd');

  # "t/path/user/local/bin/cmd",

=back

=over 4

=item which example 2

  # given: synopsis

  package main;

  my $which = $os->which('app1');

  # "t/path/user/local/bin/app1"

=back

=over 4

=item which example 3

  # given: synopsis

  package main;

  my $which = $os->which('app2');

  # "t/path/user/local/bin/app2"

=back

=over 4

=item which example 4

  # given: synopsis

  package main;

  my $which = $os->which('app3');

  # "t/path/user/bin/app3"

=back

=over 4

=item which example 5

  # given: synopsis

  package main;

  my $which = $os->which('app4');

  # "t/path/user/local/bin/app4"

=back

=over 4

=item which example 6

  # given: synopsis

  package main;

  my $which = $os->which('app5');

  # undef

=back

=cut

=head2 write

  write(any $into, string $data, string $encoding) (Venus::Os)

The write method writes to a file, filehandle, STDOUT, or STDERR, and returns
the invocant. To write to STDOUT provide the string C<"STDOUT">. To write to
STDERR provide the string C<"STDERR">. The method defaults to writing to
STDOUT.

I<Since C<4.15>>

=over 4

=item write example 1

  # given: synopsis

  package main;

  # on linux

  my $write = $os->write;

  # to STDOUT

  # ''

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 2

  # given: synopsis

  package main;

  # on linux

  my $write = $os->write(undef, '');

  # to STDOUT

  # ''

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 3

  # given: synopsis

  package main;

  # on linux

  my $write = $os->write('STDOUT');

  # to STDOUT

  # ''

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 4

  # given: synopsis

  package main;

  # on linux

  my $write = $os->write('STDOUT', '...');

  # to STDOUT

  # '...'

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 5

  # given: synopsis

  package main;

  # on linux

  my $write = $os->write('STDERR');

  # to STDERR

  # ''

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 6

  # given: synopsis

  package main;

  # on linux

  my $write = $os->write('STDERR', '...');

  # to STDERR

  # '...'

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 7

  # given: synopsis

  package main;

  # on linux

  my $file = 't/data/texts/iso-8859-1.txt';

  my $write = $os->write($file, 'Hello, world! This is ISO-8859-1.');

  # to file

  # "Hello, world! This is ISO-8859-1."

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 8

  # given: synopsis

  package main;

  # on linux

  open my $fh, '<', 't/data/texts/iso-8859-1.txt';

  my $write = $os->write($fh, 'Hello, world! This is ISO-8859-1.');

  # to file

  # "Hello, world! This is ISO-8859-1."

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 9

  # given: synopsis

  package main;

  # on linux

  use IO::File;

  my $fh = IO::File->new('t/data/texts/iso-8859-1.txt', 'w');

  my $write = $os->write($fh, 'Hello, world! This is ISO-8859-1.');

  # to ISO-8859-1 encoded file

  # "Hello, world! This is ISO-8859-1."

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 10

  # given: synopsis

  package main;

  # on linux

  my $file = 't/data/texts/utf-16be.txt';

  my $write = $os->write($file, 'Hello, world! こんにちは世界！', 'UTF-16BE');

  # to UTF-16BE encoded file

  # "Hello, world! こんにちは世界！"

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 11

  # given: synopsis

  package main;

  # on linux

  my $file = 't/data/texts/utf-16le.txt';

  my $write = $os->write($file, 'Hello, world! こんにちは世界！', 'UTF-16LE');

  # to UTF-16LE encoded file

  # "Hello, world! こんにちは世界！"

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 12

  # given: synopsis

  package main;

  # on linux

  my $file = 't/data/texts/utf-32be.txt';

  my $write = $os->write($file, 'Hello, world! こんにちは世界！', 'UTF-32BE');

  # to UTF-32BE encoded file

  # "Hello, world! こんにちは世界！"

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 13

  # given: synopsis

  package main;

  # on linux

  my $file = 't/data/texts/utf-32le.txt';

  my $write = $os->write($file, 'Hello, world! こんにちは世界！', 'UTF-32LE');

  # to UTF-32LE encoded file

  # "Hello, world! こんにちは世界！"

  # bless(..., "Venus::Os")

=back

=over 4

=item write example 14

  # given: synopsis

  package main;

  # on linux

  my $file = 't/data/texts/utf-8.txt';

  my $write = $os->write($file, 'Hello, world! こんにちは世界！', 'UTF-8');

  # to UTF-8 encoded file

  # "Hello, world! こんにちは世界！"

  # bless(..., "Venus::Os")

=back

=cut

=head1 ERRORS

This package may raise the following errors:

=cut

=over 4

=item error: C<error_on_read_binmode>

This package may raise an C<on.read.binmode> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_read_binmode> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_read_binmode({
    binmode => ':raw',
    error => 'No such file',
    from => '/path/to/nowhere',
  });

  # ...

  # my $name = $error->name;

  # "on.read.binmode"

  # my $render = $error->render;

  # "Can't binmode on read: No such file"

=back

=over 4

=item error: C<error_on_read_open_file>

This package may raise an C<on.read.open.file> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_read_open_file> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_read_open_file({
    error => 'No such file',
    file => '/path/to/nowhere',
  });

  # ...

  # my $name = $error->name;

  # "on.read.open.file"

  # my $render = $error->render;

  # "Can't open "/path/to/nowhere" for reading: No such file"

=back

=over 4

=item error: C<error_on_read_open_stdin>

This package may raise an C<on.read.open.stdin> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_read_open_stdin> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_read_open_stdin({
    error => 'Unknown',
  });

  # ...

  # my $name = $error->name;

  # "on.read.open.stdin"

  # my $render = $error->render;

  # "Can't open STDIN for reading: Unknown"

=back

=over 4

=item error: C<error_on_read_seek>

This package may raise an C<on.read.seek> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_read_seek> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_read_seek({
    error => 'Unknown',
    filehandle => \*FH,
  });

  # ...

  # my $name = $error->name;

  # "on.read.seek"

  # my $render = $error->render;

  # "Can't seek in filehandle: Unknown"

=back

=over 4

=item error: C<error_on_read_seek_reset>

This package may raise an C<on.read.seek.reset> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_read_seek_reset> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_read_seek_reset({
    error => 'Unknown',
    filehandle => \*FH,
  });

  # ...

  # my $name = $error->name;

  # "on.read.seek.reset"

  # my $render = $error->render;

  # "Can't reset seek in filehandle: Unknown"

=back

=over 4

=item error: C<error_on_write_binmode>

This package may raise an C<on.write.binmode> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_write_binmode> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_write_binmode({
    binmode => ':raw',
    error => 'No such file',
    from => '/path/to/nowhere',
  });

  # ...

  # my $name = $error->name;

  # "on.write.binmode"

  # my $render = $error->render;

  # "Can't binmode on write: No such file"

=back

=over 4

=item error: C<error_on_write_open_file>

This package may raise an C<on.write.open.file> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_write_open_file> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_write_open_file({
    error => 'No such file',
    file => '/path/to/nowhere',
  });

  # ...

  # my $name = $error->name;

  # "on.write.open.file"

  # my $render = $error->render;

  # "Can't open "/path/to/nowhere" for writing: No such file"

=back

=over 4

=item error: C<error_on_write_open_stderr>

This package may raise an C<on.write.open.stderr> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_write_open_stderr> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_write_open_stderr({
    error => 'Unknown',
  });

  # ...

  # my $name = $error->name;

  # "on.write.open.stderr"

  # my $render = $error->render;

  # "Can't open STDERR for writing: Unknown"

=back

=over 4

=item error: C<error_on_write_open_stdout>

This package may raise an C<on.write.open.stdout> error, as an instance of
C<Venus::Cli::Error>, via the C<error_on_write_open_stdout> method.

B<example 1>

  # given: synopsis;

  my $error = $os->error_on_write_open_stdout({
    error => 'Unknown',
  });

  # ...

  # my $name = $error->name;

  # "on.write.open.stdout"

  # my $render = $error->render;

  # "Can't open STDOUT for writing: Unknown"

=back

=head1 AUTHORS

Awncorp, C<awncorp@cpan.org>

=cut

=head1 LICENSE

Copyright (C) 2022, Awncorp, C<awncorp@cpan.org>.

This program is free software, you can redistribute it and/or modify it under
the terms of the Apache license version 2.0.

=cut