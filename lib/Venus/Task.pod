
=head1 NAME

Venus::Task - Task Class

=cut

=head1 ABSTRACT

Task Class for Perl 5

=cut

=head1 SYNOPSIS

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  package main;

  my $task = Example->new;

  # bless({...}, 'Example')

=cut

=head1 DESCRIPTION

This package provides a lightweight superclass and simple framework for
building command-line interfaces (CLIs) in Perl. It defines a consistent
structure and lifecycle for task execution, making it easy to create reusable
and maintainable CLI commands.

The framework operates in the following order:

=over 4

=item *

You assign the task a L<name|Venus::Cli/name>.

=item *

You invoke the L<handle/handle> method.

=item *

The L<handle|/handle> method calls L<prepare|/prepare> and then
L<execute|/execute>.

=item *

The L<prepare|/prepare> method is where CLI arguments and options are
configured. By default, L<prepare|/prepare> registers a single option: the
L<help|/help> flag.

=item *

The L<execute|/execute> method dispatches to the L<perform|/perform> method,
outputs to the terminal, and exits the application.

=item *

The L<perform|/perform> method is the main method to override in a subclass and
contains the core CLI logic.

=back

This structure encourages clean separation of configuration, execution, and
logic, making it easier to write and maintain CLI tools.

=cut

=head1 INHERITS

This package inherits behaviors from:

L<Venus::Cli>

=cut

=head1 METHODS

This package provides the following methods:

=cut

=head2 execute

  execute() (any)

The execute method dispatches to the L<perform> method, outputs to the
terminal, and exits the application.

I<Since C<4.15>>

=over 4

=item execute example 1

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  package main;

  my $task = Example->new;

  my $execute = $task->execute;

  # 0

=back

=over 4

=item execute example 2

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  sub perform {
    my ($self) = @_;

    $self->log_info('hello world');

    return $self;
  }

  package main;

  my $task = Example->new;

  my $execute = $task->execute;

  # 0

=back

=over 4

=item execute example 3

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  sub perform {
    my ($self) = @_;

    $self->log_error('oh no');

    return $self;
  }

  package main;

  my $task = Example->new;

  my $execute = $task->execute;

  # 1

=back

=cut

=head2 handle

  handle() (Venus::Task)

The handle method executes the L<prepare|/prepare> method, and then
L<execute|/execute>.

I<Since C<4.15>>

=over 4

=item handle example 1

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  sub handle {
    my ($self) = @_;

    $self->SUPER::handle; # prepare and execute

    return $self;
  }

  package main;

  my $task = Example->new;

  my $handle = $task->handle;

  # bless(..., 'Example')

=back

=cut

=head2 handle_help

  handle_help() (boolean)

The handle_help method calls the L<Venus::Cli/help> method, outputting help
text, if a help flag was found (i.e. provided). This method returns true if a
help flag was found, and false otherwise.

I<Since C<4.15>>

=over 4

=item handle_help example 1

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  package main;

  my $task = Example->new;

  $task->prepare;

  my $handle_help = $task->handle_help;

  # false

=back

=over 4

=item handle_help example 2

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  package main;

  my $task = Example->new;

  $task->prepare;

  $task->parse('--help');

  my $handle_help = $task->handle_help;

  # true

=back

=cut

=head2 new

  new(any @args) (Venus::Task)

The new method constructs an instance of the package.

I<Since C<4.15>>

=over 4

=item new example 1

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  package main;

  my $task = Example->new;

  # bless({...}, 'Example')

=back

=over 4

=item new example 2

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  package main;

  my $task = Example->new(name => 'example');

  # bless({...}, 'Example')

=back

=over 4

=item new example 3

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  package main;

  my $task = Example->new(name => 'example', version => '0.01');

  # bless({...}, 'Example')

=back

=cut

=head2 perform

  perform() (Venus::Task)

The perform method is the main method to override in a subclass and contains
the core CLI logic. This method returns the invocant.

I<Since C<4.15>>

=over 4

=item perform example 1

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  sub perform {
    my ($self) = @_;

    $self->log_info('hello world');

    return $self;
  }

  package main;

  my $task = Example->new;

  my $execute = $task->perform;

  # bless(..., 'Example')

=back

=over 4

=item perform example 2

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  sub perform {
    my ($self) = @_;

    $self->log_error('oh no');

    return $self;
  }

  package main;

  my $task = Example->new;

  my $execute = $task->perform;

  # bless(..., 'Example')

=back

=cut

=head2 prepare

  prepare() (Venus::Task)

The prepare method is the main method to override in a subclass, and is where
CLI arguments and options are configured. By default, this method registers a
single option: the help flag. This method returns the invocant.

I<Since C<4.15>>

=over 4

=item prepare example 1

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  package main;

  my $task = Example->new;

  my $prepare = $task->prepare;

  # bless(..., 'Example')

=back

=over 4

=item prepare example 2

  package Example;

  use Venus::Class 'base';

  base 'Venus::Task';

  sub name {
    'mycli'
  }

  sub prepare {
    my ($self) = @_;

    $self->option('help', {
      name => 'help',
      type => 'boolean',
    });

    $self->option('version', {
      name => 'version',
      aliases => ['v'],
      type => 'boolean',
    });

    return $self;
  }

  package main;

  my $task = Example->new;

  my $prepare = $task->prepare;

  # bless(..., 'Example')

=back

=cut

=head1 AUTHORS

Awncorp, C<awncorp@cpan.org>

=cut

=head1 LICENSE

Copyright (C) 2022, Awncorp, C<awncorp@cpan.org>.

This program is free software, you can redistribute it and/or modify it under
the terms of the Apache license version 2.0.

=cut